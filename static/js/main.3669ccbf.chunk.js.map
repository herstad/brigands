{"version":3,"sources":["PlayingField.js","movement.js","reducer.js","stateGenerator.js","itemsUtil.js","Orders.js","InfoPane.js","WinDialog.js","App.js","serviceWorker.js","index.js"],"names":["typeIcons","o","x","mounted","grass","tree","water","rock","dead","farm","crop","planted","getIcon","elem","hp","type","createMatrix","n","arguments","length","undefined","items","matrix","y","createAtPosition","find","item","PlayingFieldCell","_ref","id","dispatch","useContext","ReducerDispatch","react_default","a","createElement","TableCell_default","IconButton_default","onClick","payload","Icon_default","PlayingField","state","className","Table_default","padding","TableBody_default","map","row","TableRow_default","key","toward","target","mover","xd","yd","Math","abs","sign","move","direction","_direction","Object","objectSpread","selectItemById","getItemById","selectSelectedItem","selectedId","nextPlayer","activePlayerId","index","PLAYERS","findIndex","getWinner","isLoser","playerId","getItemsByPlayer","every","consumeAp","action","condition","agent","agentId","getAgent","selectedItem","ap","training","conditionalAction","behaviorTraining","conditionalActions","push","slice","updateItemById","createBuilding","builderId","builder","getItemByXYAndType","clearedItems","removeItemById","building","generateId","createdTurn","turn","concat","toConsumableArray","plantedShouldGrow","reducer","console","log","behaviorName","apItems","updateItems","isPlayer","grownCrops","filter","newCrops","replaceItems","events","itemId","winner","generateState","getTarget","consumedState","attacker","inRange","_selectItemById","targetId","event","name","eventType","_agent$behaviorTraini","behavior","behaviors","updatedBehavior","defineProperty","updatedBehaviorState","selectEventBehavior","generateItems","size","units","genPos","generatePosition","defaultValues","i","generateDefaultItems","points","generateRandomMatrix","shift","array","Array","from","keys","flat","shuffleArray","j","floor","random","matchPlayer","findItemByType","getItemsByXY","getEnemyItems","player","flatMap","otherPlayer","range","updatedItem","updateItemByIdFn","replacements","obj","predicate","updateItemFn","el","selectedItemHasAp","farmerHasFarm","some","getButtonColor","isSelectedAction","playerItemsWithAp","getNextAction","getNextActions","getItemsWithoutActions","TurnButton","_useContext","Button_default","forEach","AttackButton","_useContext2","color","moveCondition","targetFunc","compareDistance","firstEl","secondEl","distance","calculateDistance","targetClosestType","sort","MoveToGrassButton","_useContext3","targetClosestGrass","BuildFarmButton","_useContext4","PlantCropButton","_useContext5","HarvestCropButton","_useContext6","Orders","Card_default","CardContent_default","enemy","UnitCard","selected","relativeHp","defaultEvent","Typography_default","LinearProgress_default","variant","value","TrainEventButton","FinishTrainEventButton","EventCard","_ref2","_ref3","EventsInfo","InfoPane","WinDialog","Dialog_default","open","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","React","createContext","initialState","Boolean","window","location","hostname","match","ReactDOM","render","_useReducer","useReducer","_useReducer2","slicedToArray","CssBaseline_default","Grid_default","container","justify","spacing","Provider","xs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3669ccbf.chunk.js","sourcesContent":["import React, {useContext} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport {ReducerDispatch} from \"./App\";\n\nconst typeIcons = {\n  o: 'android',\n  x: 'directions_walk',\n  mounted: 'direction_bike',\n  grass: 'crop_free',\n  tree: 'nature',\n  water: 'waves',\n  rock: 'landscape',\n  dead: 'airline_seat_flat',\n  farm: 'home',\n  crop: 'local_florist',\n  planted: 'minimize',\n\n};\n\nconst getIcon = (elem) => elem.hp < 1 ? typeIcons['dead'] : typeIcons[elem.type] || 'crop_free';\n\nconst createMatrix = (n = 10, items) => {\n  let matrix = [];\n  for (let y = 0; y < n; y++) {\n    matrix[y] = [];\n    for (let x = 0; x < n; x++) {\n      matrix[y][x] = createAtPosition(items, x, y);\n    }\n  }\n  return matrix;\n};\n\nconst createAtPosition = (items = [], x, y) => {\n  return items.find((item) => item.x === x && item.y === y) || {x: x, y: y, type: '.'}\n};\n\nfunction PlayingFieldCell({elem}) {\n  const {dispatch} = useContext(ReducerDispatch);\n  const handleSetSelected = (id) => () => {\n    dispatch({type: 'SET_SELECTED', payload: id});\n  };\n  return (\n    <TableCell>\n      <IconButton\n        onClick={handleSetSelected(elem.id)}><Icon>{getIcon(elem)}</Icon></IconButton>\n    </TableCell>);\n}\n\nexport default function PlayingField() {\n  const {items} = useContext(ReducerDispatch).state;\n  const matrix = createMatrix(10, items);\n  return <div className=\"PlayingField\">\n    <Table padding=\"none\">\n      <TableBody>\n        {\n          (matrix.map(row =>\n            <TableRow key={row[0].y}>{\n              row.map(elem => <PlayingFieldCell key={'x' + elem.x + 'y' + elem.y} elem={elem}/>)}\n            </TableRow>))\n        }\n      </TableBody>\n    </Table>\n  </div>;\n}\n","export const toward = target => mover => {\n  const xd = target.x - mover.x;\n  const yd = target.y - mover.y;\n  return Math.abs(xd) > Math.abs(yd) ? {x: Math.sign(xd), y: 0} : {x: 0, y: Math.sign(yd)};\n};\n\nexport const move = (mover, direction) => {\n  const {x, y} = direction(mover);\n  return {...mover, x: (mover.x + x), y: (mover.y + y)}\n};","import {generateId, generateState, PLAYERS} from \"./stateGenerator\";\nimport {\n  getItemById,\n  getItemByXYAndType,\n  getItemsByPlayer,\n  inRange,\n  isPlayer,\n  removeItemById,\n  replaceItems,\n  updateItemById,\n  updateItems\n} from \"./itemsUtil\";\nimport {move, toward} from \"./movement\";\n\nexport const selectItemById = id => state => getItemById(id, state.items);\n\nexport const selectSelectedItem = (state) => getItemById(state.selectedId, state.items);\n\nconst selectEventBehavior = behaviorName => eventType => state => {\n  const behavior = state.behaviors[behaviorName] || {};\n  const eventBehavior = behavior[eventType] || {};\n  return eventBehavior.conditionalActions || [];\n}\n\nconst nextPlayer = (activePlayerId) => {\n  const index = PLAYERS.findIndex((id) => id === activePlayerId);\n  return PLAYERS[(index + 1) % PLAYERS.length];\n};\n\nconst nextTurn = (turn, activePlayerId) => PLAYERS.slice(-1)[0] === activePlayerId ? turn + 1 : turn;\n\nconst getWinner = (state) => {\n  return isLoser('ai', state.items) ? 'human' : isLoser('human', state.items) ? 'ai' : undefined;\n};\n\nconst isLoser = (playerId, items) => {\n  return getItemsByPlayer(playerId, items).every((item) => item.hp <= 0);\n};\n\nconst consumeAp = (action, state) => {\n  const {condition} = action.payload;\n  // TODO require getAgent\n  const agent = action.payload.agentId !== undefined ? selectItemById(action.payload.agentId)(state) : action.payload.getAgent(state);\n  const selectedItem = {\n    ...agent,\n    ap: 0,\n    action,\n    condition,\n  };\n  // TODO rewrite without if\n  if (!!selectedItem.training) {\n    const conditionalAction = {action, condition};\n    selectedItem.behaviorTraining.conditionalActions.push(conditionalAction);\n  } else {\n    const index = selectedItem.conditionalActions.findIndex(conditionalAction => conditionalAction.action.type === action.type);\n    if (index > 0) {\n      selectedItem.conditionalActions = selectedItem.conditionalActions.slice(index);\n    }\n  }\n  return updateItemById(selectedItem, state);\n};\n\nconst createBuilding = (builderId, type, state) => {\n  const builder = selectItemById(builderId)(state);\n  const target = getItemByXYAndType(state.items)(builder)('grass');\n  const clearedItems = removeItemById(target.id, state.items);\n  const building = {\n    id: generateId(),\n    builderId,\n    x: builder.x,\n    y: builder.y,\n    type,\n    createdTurn: state.turn,\n  };\n  return {...state, items: [...clearedItems, building]}\n};\n\nconst plantedShouldGrow = turn => item => item.type === 'planted' && item.createdTurn + 5 <= turn;\n\nexport default (state, action) => {\n  console.log('Action');\n  console.log(action);\n  console.log(state);\n  const {payload} = action;\n  switch (action.type) {\n    case 'END_TURN': {\n      const apItems = updateItems((item) => isPlayer(payload, item))({ap: 1})(state.items);\n      const grownCrops = apItems.filter(plantedShouldGrow(state.turn));\n      const newCrops = updateItems(plantedShouldGrow(state.turn))({type: 'crop',})(grownCrops);\n      const items = replaceItems(apItems)(newCrops);\n      const events = newCrops.map((item) => ({type: 'CROP_GROWN', itemId: item.id}));\n      return {\n        ...state,\n        items,\n        turn: nextTurn(state.turn, state.activePlayerId),\n        activePlayerId: nextPlayer(state.activePlayerId),\n        winner: getWinner(state),\n        events,\n      };\n    }\n    case 'RESTART': {\n      return generateState();\n    }\n    case 'SET_SELECTED': {\n      return {...state, selectedId: payload};\n    }\n    case 'ATTACK': {\n      const {getAgent, getTarget} = payload;\n      const consumedState = consumeAp(action, state);\n      const attacker = getAgent(consumedState);\n      const target = getTarget(consumedState);\n      if (inRange(attacker, target)) {\n        console.log('target in range!');\n        return updateItemById({...target, hp: target.hp - 1}, consumedState);\n      } else {\n        console.log('target not in range!');\n        return updateItemById(move(attacker, toward(target)), consumedState);\n      }\n    }\n    case 'MOVE': {\n      const {getAgent, getTarget} = payload;\n      const consumedState = consumeAp(action, state);\n      const agent = getAgent(consumedState);\n      const target = getTarget(consumedState);\n      return updateItemById(move(agent, toward(target)), consumedState);\n    }\n    case 'BUILD_FARM': {\n      return createBuilding(payload.agentId, 'farm', consumeAp(action, state));\n    }\n    case 'PLANT_CROP': {\n      return createBuilding(payload.agentId, 'planted', consumeAp(action, state));\n    }\n    case 'HARVEST_CROP': {\n      const consumedState = consumeAp(action, state);\n      const {x, y} = selectItemById(payload.targetId)(state);\n      const grass = {\n        id: generateId(),\n        x,\n        y,\n        type: 'grass',\n      };\n      return {\n        ...consumedState,\n        items: [...removeItemById(payload.targetId, consumedState.items), grass],\n      }\n    }\n    case 'TRAIN_EVENT': {\n      const {agentId, event} = payload;\n      return updateItemById({\n        id: agentId,\n        behaviorTraining: {name: 'farmer', eventType: event.type, conditionalActions: []},\n        training: true,\n      }, state);\n    }\n    case 'FINISH_TRAIN_EVENT': {\n      const {agentId} = payload;\n      const agent = selectItemById(agentId)(state);\n      const {name, eventType, conditionalActions} = agent.behaviorTraining;\n      const behavior = state.behaviors[name] || {};\n      const updatedBehavior = {\n        ...behavior,\n        name,\n        [eventType]: {\n          eventType,\n          conditionalActions,\n        },\n      };\n      const updatedBehaviorState = {\n        ...state,\n        behaviors: {...state.behaviors, [name]: updatedBehavior}\n      };\n      return updateItemById({\n        ...agent,\n        behaviorTraining: {},\n        conditionalActions,\n        training: false,\n      }, updatedBehaviorState);\n\n    }\n    case 'SET_UNIT_BEHAVIOR': {\n      const agent = payload.getAgent(state);\n      const conditionalActions = selectEventBehavior(agent.behaviorName)(payload.eventType)(state);\n      console.log('Updated actions for event: ' + payload.eventType);\n      console.log(conditionalActions);\n      return updateItemById({...agent, conditionalActions: [...conditionalActions]}, state);\n    }\n    default:\n      return state;\n  }\n};\n","import {selectItemById} from \"./reducer\";\n\nexport const PLAYERS = ['human', 'ai'];\n\nexport const generateState = () => {\n  console.log(\"generate state\");\n\n  const items = generateItems();\n  return {\n    turn: 0,\n    activePlayerId: PLAYERS[0],\n    items,\n    selectedId: items[0].id,\n    winner: undefined,\n    events: [{type: 'ENEMY_SPOTTED', itemId: items[1].id}, {type: 'GAME_STARTED'}],\n    behaviors: {},\n    training: false,\n  };\n};\n\nlet itemId = 0;\n\nexport const generateId = () => {\n  itemId++;\n  return itemId;\n};\n\nconst generateDefaultItems = (size) => {\n  const defaultValues = [];\n  for (let i = 0; i < size; i++) {\n    defaultValues.push({id: generateId(), type: 'grass'});\n  }\n  return defaultValues;\n};\n\nconst generateItems = (size = 10) => {\n  const units = [\n    {\n      id: generateId(),\n      hp: 5, type: 'x',\n      playerId: 'human',\n      ap: 1,\n      behaviorName: 'farmer',\n      conditionalActions: [\n        {\n          action: {\n            type: 'ATTACK',\n            payload: {\n              getAgent: selectItemById(1),\n              getTarget: selectItemById(2),\n            }\n          },\n          condition: () => true,\n        },\n      ]\n    },\n    {\n      id: generateId(),\n      hp: 5,\n      type: 'o',\n      playerId: 'ai',\n      ap: 1,\n      behaviorName: 'farmer',\n      conditionalActions: [\n        {\n          action: {type: 'FAKE'},\n          condition: () => false\n        },\n      ],\n    },\n  ];\n\n  const items = [\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'water'},\n    {id: generateId(), type: 'water'},\n    {id: generateId(), type: 'water'},\n  ];\n\n  const genPos = generatePosition(size);\n  return genPos(units).concat(genPos(items.concat(generateDefaultItems(size * size - items.length))));\n};\n\nconst generatePosition = (size) => (items) => {\n  const points = generateRandomMatrix(size);\n  return items.map((item) => ({...item, ...points.shift()}));\n};\n\nconst generateRandomMatrix = (size) => {\n  const array = Array.from(Array(size).keys());\n  const matrix = array.map((x) => {\n    return array.map((y) => {\n      return {x, y};\n    })\n  }).flat();\n  shuffleArray(matrix);\n  return matrix;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};","import {PLAYERS} from \"./stateGenerator\";\n\nexport const isPlayer = (playerId, item) => item.playerId === playerId;\nexport const matchPlayer = (playerId) => (item) => isPlayer(playerId, item);\nexport const getItemById = (id, items) => items.find((item) => item.id === id);\nexport const getItemsByPlayer = (playerId, items) => items.filter(matchPlayer(playerId));\nexport const getItemsByXY = items => ({x, y}) => items.filter((item) => item.x === x && item.y === y);\nexport const getItemByXYAndType = items => selectedItem => type => findItemByType(getItemsByXY(items)(selectedItem))(type);\nexport const findItemByType = items => type => items.find(item => item.type === type);\nexport const removeItemById = (id, items) => items.filter((item) => item.id !== id);\nexport const getEnemyItems = (state) => {\n  const otherPlayers = PLAYERS.filter((player) => state.activePlayerId !== player);\n  return otherPlayers.flatMap((otherPlayer) => getItemsByPlayer(otherPlayer, state.items));\n};\nexport const inRange = (attacker, target, range = 1) => {\n  return Math.abs(target.x - attacker.x) + Math.abs(target.y - attacker.y) <= range;\n};\nexport const updateItemById = (updatedItem, state) => {\n  const items = state.items.map(updateItemByIdFn(updatedItem));\n  return ({...state, items});\n};\n\nexport const replaceItems = items => replacements => {\n  return items.map(obj => replacements.find(o => o.id === obj.id) || obj);\n};\n\nexport const updateItems = predicate => updatedItem => items => {\n  return items.map(updateItemFn(predicate)(updatedItem));\n};\n\nexport const updateItemFn = predicate => updatedItem => {\n  return el => (predicate(el) ? {...el, ...updatedItem} : el);\n};\n\nexport const replaceItemFn = predicate => updatedItem => {\n  return el => (predicate(el) ? updatedItem : el);\n};\n\nexport const updateItemByIdFn = (updatedItem) => {\n  return updateItemFn(el => updatedItem.id === el.id)(updatedItem);\n};\n\nexport const matchId = (id) => {\n  return (item) => item.id === id;\n};","import React, {useContext} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport {getEnemyItems, getItemByXYAndType, getItemsByPlayer} from \"./itemsUtil\";\nimport {ReducerDispatch} from \"./App\";\nimport {selectItemById, selectSelectedItem} from \"./reducer\";\n\n\nconst selectedItemHasAp = (state) => {\n  const selectedItem = selectSelectedItem(state);\n  return selectedItem.ap > 0 && selectedItem.playerId === state.activePlayerId;\n};\n\nconst farmerHasFarm = (state) => {\n  return state.items.some((item) => item.type === 'farm' && item.builderId === state.selectedId);\n};\n\nconst getButtonColor = (type, state) => isSelectedAction(type, state) ? 'primary' : 'default';\n\nconst playerItemsWithAp = (playerId) => (items) => {\n  return getItemsByPlayer(playerId, items)\n    .filter(item => item.ap);\n};\n\nconst getNextAction = state => conditionalActions => conditionalActions.find((conditionalAction) => conditionalAction.condition(state));\n\nconst getNextActions = (state) => (items) => {\n  return items.map((item) => getNextAction(state)(item.conditionalActions));\n};\n\nconst getItemsWithoutActions = state => items => {\n  return items.filter(item => !getNextAction(state)(item.conditionalActions))\n};\n\nconst isSelectedAction = (type, state) => {\n  const conditionalAction = getNextAction(state)(selectSelectedItem(state).conditionalActions);\n  return conditionalAction && type === conditionalAction.action.type;\n};\n\nfunction TurnButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const {items, activePlayerId} = state;\n  const handleEndTurn = (playerId) => () => {\n\n    // TODO make nicer\n    getItemsWithoutActions(state)(playerItemsWithAp(playerId)(items)).forEach(item => dispatch({\n      type: 'SET_UNIT_BEHAVIOR',\n      payload: {\n        getAgent: selectItemById(item.id),\n        eventType: 'DEFAULT_EVENT',\n      }\n    }));\n\n    getNextActions(state)(playerItemsWithAp(playerId)(items))\n      .forEach((conditionalAction) => conditionalAction && conditionalAction.condition(state) ? dispatch(conditionalAction.action) : undefined);\n    dispatch({\n      type: 'END_TURN',\n      payload: playerId\n    })\n  };\n  return (\n    <Button onClick={handleEndTurn(activePlayerId)}>Turn({activePlayerId}): {state.turn}</Button>\n  );\n}\n\nfunction AttackButton({targetId}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const condition = selectedItemHasAp;\n  if (!condition(state)) {\n    return null;\n  }\n  const color = getButtonColor('ATTACK', state);\n  const handleAttack = () => {\n    dispatch({\n      type: 'ATTACK',\n      payload: {\n        getAgent: selectItemById(state.selectedId),\n        getTarget: selectItemById(targetId),\n        condition,\n      }\n    })\n  };\n  return (<Button color={color} onClick={handleAttack}>Attack Enemy</Button>);\n}\n\nconst moveCondition = (targetFunc) => (state) => {\n  const agent = selectSelectedItem(state);\n  const target = targetFunc(state);\n  return selectedItemHasAp(state) && !(agent.x === target.x && agent.y === target.y);\n};\n\nconst calculateDistance = agent => target => Math.abs(agent.x - target.x) + Math.abs(agent.y - target.y);\n\nconst compareDistance = agent => (firstEl, secondEl) => {\n  const distance = calculateDistance(agent);\n  return distance(firstEl) - distance(secondEl);\n};\nconst targetClosestType = agent => type => state => state.items.filter(item => item.type === type).sort(compareDistance(agent))[0];\n\nfunction MoveToGrassButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  const targetClosestGrass = targetClosestType(agent)('grass');\n\n  const condition = moveCondition(targetClosestGrass);\n  if (!condition(state)) {\n    return null;\n  }\n  const color = getButtonColor('MOVE', state);\n  const handleMoveToGrass = () => {\n    const agentId = state.selectedId;\n    dispatch({\n      type: 'MOVE',\n      payload: {\n        getAgent: selectItemById(agentId),\n        getTarget: targetClosestGrass,\n        condition,\n      }\n    })\n  };\n  return (<Button color={color} onClick={handleMoveToGrass}>Move To Grass</Button>);\n}\n\nfunction BuildFarmButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n\n  const condition = state => {\n    return selectedItemHasAp(state)\n      && !farmerHasFarm(state)\n      && getItemByXYAndType(state.items)(selectSelectedItem(state))('grass');\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handleBuildFarm = () => {\n    dispatch({\n      type: 'BUILD_FARM',\n      payload: {\n        agentId: state.selectedId,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleBuildFarm}>Build farm</Button>);\n}\n\nfunction PlantCropButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const condition = state => {\n    return selectedItemHasAp(state)\n      && farmerHasFarm(state)\n      && getItemByXYAndType(state.items)(selectSelectedItem(state))('grass');\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handlePlantCrop = () => {\n    dispatch({\n      type: 'PLANT_CROP',\n      payload: {\n        agentId: state.selectedId,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handlePlantCrop}>PlantCrop</Button>);\n}\n\nfunction HarvestCropButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const selectedItem = selectSelectedItem(state);\n  const target = getItemByXYAndType(state.items)(selectedItem)('crop');\n  const condition = state => {\n    const selectedItem = selectSelectedItem(state);\n    const target = getItemByXYAndType(state.items)(selectedItem)('crop');\n    return selectedItemHasAp(state) && !!target;\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handleHarvestCrop = () => {\n    dispatch({\n      type: 'HARVEST_CROP',\n      payload: {\n        agentId: state.selectedId,\n        targetId: target.id,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleHarvestCrop}>HarvestCrop</Button>);\n}\n\nexport default function Orders() {\n  const {state} = useContext(ReducerDispatch);\n  return <div>\n    <Card>\n      <CardContent>\n        <TurnButton/>\n        {\n          getEnemyItems(state).map((enemy) => <AttackButton key={enemy.id} targetId={enemy.id}/>)\n        }\n        <MoveToGrassButton/>\n        <BuildFarmButton/>\n        <PlantCropButton/>\n        <HarvestCropButton/>\n      </CardContent>\n    </Card>\n  </div>\n}\n","import React, {useContext} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {ReducerDispatch} from \"./App\";\nimport Button from \"@material-ui/core/Button\";\nimport {selectItemById, selectSelectedItem} from \"./reducer\";\n\nfunction UnitCard() {\n  const {state} = useContext(ReducerDispatch);\n  const selected = selectSelectedItem(state);\n  if (selected === undefined) {\n    return null;\n  }\n  const {id, playerId, x, y, hp, ap, type} = selected;\n  const maxHp = 5;\n  const relativeHp = hp / maxHp * 100;\n  const defaultEvent = {type: 'DEFAULT_EVENT', itemId: selected.id};\n  return (\n    <Card>\n      <CardContent>\n        <Typography>id:{id}</Typography>\n        <Typography>player:{playerId}</Typography>\n        <Typography>x:{x}</Typography>\n        <Typography>y:{y}</Typography>\n        <Typography>hp:{hp}</Typography>\n        <Typography>ap:{ap}</Typography>\n        <Typography>type:{type}</Typography>\n        <LinearProgress variant=\"determinate\" value={relativeHp}/>\n        <TrainEventButton event={defaultEvent}/>\n        <FinishTrainEventButton/>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TrainEventButton({event}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  if (state.selectedId === undefined) {\n    return null;\n  }\n  const handleTrainEvent = () => {\n    dispatch({\n      type: 'TRAIN_EVENT',\n      payload: {\n        agentId: event.itemId,\n        event,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleTrainEvent}>Train Default Behavior</Button>);\n}\n\nfunction FinishTrainEventButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  if (state.selectedId === undefined) {\n    return null;\n  }\n  const handleTrainEvent = () => {\n    dispatch({\n      type: 'FINISH_TRAIN_EVENT',\n      payload: {\n        agentId: state.selectedId,\n      }\n    })\n  };\n  return (\n    <Button color='default' onClick={handleTrainEvent}>Finish train Default Behavior</Button>);\n}\n\nfunction EventCard({event}) {\n  const {state} = useContext(ReducerDispatch);\n  const {x, y, type} = (event.itemId ? selectItemById(event.itemId)(state) : {});\n  return (\n    <Card>\n      <CardContent>\n        <Typography>type:{event.type}</Typography>\n        <Typography>x:{x}</Typography>\n        <Typography>y:{y}</Typography>\n        <Typography>itemType:{type}</Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction EventsInfo() {\n  const {events} = useContext(ReducerDispatch).state;\n  return events.map((event, index) => <EventCard key={\"event\" + index} event={event}/>);\n}\n\nexport default function InfoPane() {\n  return <div>\n    <UnitCard/>\n    <EventsInfo/>\n  </div>\n}\n","import React, {useContext} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {ReducerDispatch} from \"./App\";\n\nexport default function WinDialog() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n\n\n  const handleRestart = () => dispatch({type: 'RESTART', payload: undefined});\n  return (\n    <div>\n      <Dialog open={!!state.winner} aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\">\n        <DialogTitle id=\"alert-dialog-title\">{`The winner is ${state.winner}!`}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">Play another round?</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">Yes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, {useReducer} from 'react';\nimport './App.css';\nimport PlayingField from './PlayingField';\nimport Orders from './Orders';\nimport InfoPane from './InfoPane';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport WinDialog from \"./WinDialog\";\nimport reducer from \"./reducer\";\nimport {generateState} from \"./stateGenerator\";\n\nexport const ReducerDispatch = React.createContext(null);\n\nconst initialState = generateState();\n\nexport default function App() {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n      <Grid container justify=\"center\" direction=\"row\" spacing={24}>\n        <ReducerDispatch.Provider value={{state, dispatch}}>\n          <WinDialog/>\n          <Grid item xs>\n            <InfoPane/>\n          </Grid>\n          <Grid item xs>\n            <PlayingField size=\"10\"/>\n          </Grid>\n          <Grid item xs={4}>\n            <Orders/>\n          </Grid>\n        </ReducerDispatch.Provider>\n      </Grid>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}