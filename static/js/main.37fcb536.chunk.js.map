{"version":3,"sources":["itemTypes.js","events/eventTypes.js","stateGenerator.js","itemsUtil.js","movement.js","functional.js","events/eventUtils.js","movement/findPath.js","reducer.js","PlayingField.js","Orders.js","InfoPane.js","WinDialog.js","App.js","serviceWorker.js","index.js"],"names":["GRASS","TREE","FARM","CROP","PLANTED","WAREHOUSE","PATH","DEFAULT_EVENT","RESOURCE_PICKUP","SLEEPING","PLAYERS","generateState","console","log","items","generateItems","turn","activePlayerId","selectedId","id","winner","undefined","events","type","itemId","behaviors","training","generateId","size","arguments","length","units","hp","playerId","ap","behaviorName","conditionalActions","activeEvent","resources","genPos","generatePosition","concat","defaultValues","i","push","generateDefaultItems","points","generateRandomMatrix","map","item","Object","objectSpread","shift","array","Array","from","keys","matrix","x","y","flat","shuffleArray","j","Math","floor","random","_ref","getItemById","find","getItemsByPlayer","filter","isPlayer","matchPlayer","getItemByXYAndType","selectedItem","findItemByType","getItemsByXY","getEnemyItems","state","player","flatMap","otherPlayer","inRange","attacker","target","range","abs","updateItem","updatedItem","updateItemByIdFn","updateItemById","updateItemFn","predicate","el","move","mover","nextNode","gCost","calculateDistance","agent","pipe","_len2","fns","_key2","reduce","v","f","isEventVisible","agentId","event","local","getSuccessorsFromNodes","nodes","_ref2","get","Boolean","distance","nodeA","nodeB","estimate","goal","unknownSteps","nodeMap","filtered","Map","forEach","node","currentNode","_mapEntry","mapEntry","_mapEntry2","slicedToArray","key","value","set","terrainCosts","_terrainCosts","defineProperty","terrainCost","itemToNode","_ref3","itemsToNodes","getCallbacks","isGoal","node1","node2","getSuccessors","ATTACK","AUTO_ACTION","BUILD_FARM","BUILD_WAREHOUSE","END_TURN","FINISH_TRAIN_EVENT","HARVEST_CROP","MOVE","MAKE_PATH","PLANT_CROP","RESTART","SET_ACTIVE_EVENT","SET_SELECTED","SET_UNIT_BEHAVIOR","TRAIN_EVENT","UNLOAD_RESOURCE","LOAD_RESOURCE","SLEEP","selectItemById","selectSelectedItem","selectEventBehavior","eventType","selectActivePlayerId","nextPlayer","index","findIndex","delegateToReducer","action","reducer","consumeAp","_action$payload","payload","getAgent","_action$payload$apCos","apCost","postAction","behaviorTraining","toConsumableArray","recordAction","createBuilding","builder","createBuildingOn","buildingType","targetId","clearedItems","building","builderId","createdTurn","plantedShouldGrow","getNextActions","conditionalAction","condition","slice","getNextAction","endTurn","attackCondition","getTarget","attack","setUnitBehaviorAction","autoAction","buildWarehouse","some","farmerHasFarm","farmCondition","buildFarm","plantCropCondition","plantCrop","harvestCropCondition","harvestCrop","moveTowardTarget","moveCondition","makePathTarget","makePath","unloadResourceCondition","getByType","unloadResource","loadResourceCondition","loadResource","setActiveEvent","trainEventBehavior","finishTrainEventBehavior","restart","setSelectedItem","sleepOneTurn","createEvent","publishEvents","isHome","updateItemsByActivePlayer","fn","updates","apply","replenishAp","cropsGrownEvents","cropEvents","createLocalEvent","growCrops","updateItems","filterOldEvents","e","addEventsToUnits","hasBehaviorForEvent","setNextTurn","setNextPlayer","updateConditionalActions","nextActions","performCurrentAction","actions","updatedTarget","path","start","filteredNodes","source","astar","findPath","s","visited","addedResourceState","resource","updatedAgent","name","_agent5$behaviorTrain","behavior","updatedBehavior","updatedBehaviorState","unitActions","typeIcons","_typeIcons","getIcon","elem","createMatrix","n","createAtPosition","PlayingFieldCell","dispatch","useContext","ReducerDispatch","react_default","a","createElement","TableCell_default","IconButton_default","onClick","Icon_default","PlayingField","className","Table_default","padding","TableBody_default","row","TableRow_default","playerItemsWithAp","OrderButton","children","_useContext","shouldDisplayOrder","Button_default","TurnButton","_useContext2","playerItem","unitHasAp","AttackButton","targetClosestType","sort","firstEl","secondEl","targetHome","MoveToGrassButton","MoveButton","targetName","getActiveEventTarget","MoveToEventButton","MoveToHomeButton","MoveToWarehouseButton","BuildWarehouseButton","BuildFarmButton","PlantCropButton","HarvestCropButton","UnloadResourceButton","LoadResourceButton","Orders","Card_default","CardContent_default","enemy","UnitCard","selected","relativeHp","defaultEvent","Typography_default","LinearProgress_default","variant","TrainEventButton","FinishTrainEventButton","SelectEventButton","color","_useContext3","_useContext4","EventCard","_ref4","EventsInfo","selectedUnit","visibleEvents","InfoPane","WinDialog","Dialog_default","open","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","React","createContext","initialState","window","location","hostname","match","ReactDOM","render","_useReducer","useReducer","_useReducer2","CssBaseline_default","Grid_default","container","justify","direction","spacing","Provider","xs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37fcb536.chunk.js","sourcesContent":["export const PLAYER2 = 'o';\nexport const HUMAN = 'x';\nexport const MOUNTED = 'mounted';\nexport const GRASS = 'grass';\nexport const TREE = 'tree';\nexport const WATER = 'water';\nexport const ROCK = 'rock';\nexport const DEAD = 'dead';\nexport const FARM = 'farm';\nexport const CROP = 'crop';\nexport const PLANTED = 'planted';\nexport const WAREHOUSE = 'warehouse';\nexport const PATH = 'path';","export const DEFAULT_EVENT = 'DEFAULT_EVENT';\nexport const RESOURCE_PICKUP = 'RESOURCE_PICKUP';\nexport const CROP_GROWN = 'CROP_GROWN';\nexport const SLEEPING = 'SLEEPING';","import {GRASS, HUMAN, PLAYER2, ROCK, TREE, WATER} from \"./itemTypes\";\nimport {DEFAULT_EVENT} from \"./events/eventTypes\";\n\nexport const PLAYERS = ['human', 'ai'];\n\nexport const generateState = () => {\n  console.log(\"generate state\");\n\n  const items = generateItems();\n  return {\n    turn: 0,\n    activePlayerId: PLAYERS[0],\n    items,\n    selectedId: items[0].id,\n    winner: undefined,\n    events: [{type: 'ENEMY_SPOTTED', itemId: items[1].id}, {type: 'GAME_STARTED'}],\n    behaviors: {},\n    training: false,\n  };\n};\n\nlet itemId = 0;\n\nexport const generateId = () => {\n  itemId++;\n  return itemId;\n};\n\nconst generateDefaultItems = (size) => {\n  const defaultValues = [];\n  for (let i = 0; i < size; i++) {\n    defaultValues.push({id: generateId(), type: GRASS});\n  }\n  return defaultValues;\n};\n\nconst generateItems = (size = 10) => {\n  const units = [\n    {\n      id: generateId(),\n      hp: 5,\n      type: HUMAN,\n      playerId: 'human',\n      ap: 10,\n      behaviorName: 'farmer',\n      conditionalActions: [],\n      events: [],\n      activeEvent: {type: DEFAULT_EVENT},\n      resources: [],\n    },\n    {\n      id: generateId(),\n      hp: 5,\n      type: PLAYER2,\n      playerId: 'ai',\n      ap: 10,\n      behaviorName: 'brigand',\n      conditionalActions: [],\n      events: [],\n      activeEvent: {type: DEFAULT_EVENT},\n      resources: [],\n    },\n    {\n      id: generateId(),\n      hp: 5,\n      type: HUMAN,\n      playerId: 'human',\n      ap: 10,\n      behaviorName: 'farmer',\n      conditionalActions: [],\n      events: [],\n      activeEvent: {type: DEFAULT_EVENT},\n      resources: [],\n    },\n    {\n      id: generateId(),\n      hp: 5,\n      type: HUMAN,\n      playerId: 'human',\n      ap: 10,\n      behaviorName: 'hauler',\n      conditionalActions: [],\n      events: [],\n      activeEvent: {type: DEFAULT_EVENT},\n      resources: [],\n    },\n  ];\n\n  const items = [\n    {id: generateId(), type: TREE},\n    {id: generateId(), type: TREE},\n    {id: generateId(), type: TREE},\n    {id: generateId(), type: TREE},\n    {id: generateId(), type: TREE},\n    {id: generateId(), type: TREE},\n    {id: generateId(), type: ROCK},\n    {id: generateId(), type: ROCK},\n    {id: generateId(), type: ROCK},\n    {id: generateId(), type: WATER},\n    {id: generateId(), type: WATER},\n    {id: generateId(), type: WATER},\n  ];\n\n  const genPos = generatePosition(size);\n  return genPos(units).concat(genPos(items.concat(generateDefaultItems(size * size - items.length))));\n};\n\nconst generatePosition = (size) => (items) => {\n  const points = generateRandomMatrix(size);\n  return items.map((item) => ({...item, ...points.shift()}));\n};\n\nconst generateRandomMatrix = (size) => {\n  const array = Array.from(Array(size).keys());\n  const matrix = array.map((x) => {\n    return array.map((y) => {\n      return {x, y};\n    })\n  }).flat();\n  shuffleArray(matrix);\n  return matrix;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};","import {PLAYERS} from \"./stateGenerator\";\n\nexport const isPlayer = (playerId, item) => item.playerId === playerId;\nexport const matchPlayer = (playerId) => (item) => isPlayer(playerId, item);\nexport const getItemById = (id, items) => items.find((item) => item.id === id);\nexport const getItemsByPlayer = (playerId, items) => items.filter(matchPlayer(playerId));\nexport const getItemsByXY = items => ({x, y}) => items.filter((item) => item.x === x && item.y === y);\nexport const getItemByXYAndType = items => selectedItem => type => findItemByType(getItemsByXY(items)(selectedItem))(type);\nexport const findItemByType = items => type => items.find(item => item.type === type);\nexport const removeItemById = (id, items) => items.filter((item) => item.id !== id);\nexport const getEnemyItems = (state) => {\n  const otherPlayers = PLAYERS.filter((player) => state.activePlayerId !== player);\n  return otherPlayers.flatMap((otherPlayer) => getItemsByPlayer(otherPlayer, state.items));\n};\nexport const inRange = (attacker, target, range = 1) => {\n  return Math.abs(target.x - attacker.x) + Math.abs(target.y - attacker.y) <= range;\n};\n\nexport const updateItem = updatedItem => state => {\n  const items = state.items.map(updateItemByIdFn(updatedItem));\n  return ({...state, items});\n};\n\nexport const updateItemById = (updatedItem, state) => {\n  const items = state.items.map(updateItemByIdFn(updatedItem));\n  return ({...state, items});\n};\n\nexport const replaceItems = items => replacements => {\n  return items.map(obj => replacements.find(o => o.id === obj.id) || obj);\n};\n\nexport const updateItems = predicate => updatedItem => state => {\n  const items = state.items.map(updateItemFn(predicate)(updatedItem));\n  return {...state, items};\n};\n\nexport const updateItemFn = predicate => updatedItem => {\n  return el => (predicate(el) ? {...el, ...updatedItem} : el);\n};\n\nexport const replaceItemFn = predicate => updatedItem => {\n  return el => (predicate(el) ? updatedItem : el);\n};\n\nexport const updateItemByIdFn = (updatedItem) => {\n  return updateItemFn(el => updatedItem.id === el.id)(updatedItem);\n};\n\nexport const matchId = (id) => {\n  return (item) => item.id === id;\n};","export const toward = target => mover => {\n  const xd = target.x - mover.x;\n  const yd = target.y - mover.y;\n  return Math.abs(xd) > Math.abs(yd) ? {x: Math.sign(xd), y: 0} : {x: 0, y: Math.sign(yd)};\n};\n\nexport const move = (mover, nextNode) => {\n  const {x, y, gCost} = nextNode;\n  return {...mover, ap: (mover.ap - gCost), x, y}\n};\n\nexport const calculateDistance = agent => target => Math.abs(agent.x - target.x) + Math.abs(agent.y - target.y);\n\nexport const compareDistance = agent => (firstEl, secondEl) => {\n  const distance = calculateDistance(agent);\n  return distance(firstEl) - distance(secondEl);\n};","export const compose = (...fns) => (x) => fns.reduceRight((v, f) => f(v), x);\nexport const pipe = (...fns) => (x) => fns.reduce((v, f) => f(v), x);\n","import {selectEventBehavior} from \"../reducer\";\n\nexport const hasBehaviorForEvent = item => event => state => {\n  const behavior = selectEventBehavior(item.behaviorName)(event.type)(state);\n  return !!behavior.length;\n};\n\nexport const isEventVisible = agentId => event => !event.local || agentId === event.agentId;\n","import astar from \"astar-algorithm\"\nimport {calculateDistance} from \"../movement\";\nimport {CROP, FARM, GRASS, PATH, PLANTED, ROCK, TREE, WAREHOUSE, WATER} from \"../itemTypes\";\n\nconst MINIMUM_GCOST = 5;\n\nconst id = ({x, y}) => `x${x}y${y}`;\nconst equalsNode = node1 => node2 => id(node1) === id(node2);\nconst getSuccessorsFromNodes = nodes => ({x, y}) => {\n  return [\n    nodes.get(id({x: x - 1, y: y})),\n    nodes.get(id({x: x + 1, y: y})),\n    nodes.get(id({x: x, y: y - 1})),\n    nodes.get(id({x: x, y: y + 1}))].filter(Boolean);\n};\nconst distance = (nodeA, nodeB) => nodeB.gCost;\nconst estimate = (nodeA, goal) => {\n  const unknownSteps = calculateDistance(nodeA)(goal) - 1;\n  return nodeA.gCost + (unknownSteps * MINIMUM_GCOST)\n};\nconst mapEntry = node => [id(node), node];\n\nconst nodeMap = nodes => {\n  const filtered = new Map();\n  nodes.forEach(node => {\n    const currentNode = filtered.get(id(node));\n    if (!currentNode || node.gCost < currentNode.gCost) {\n      const [key, value] = mapEntry(node);\n      filtered.set(key, value);\n    }\n  });\n  return filtered;\n};\n\nconst terrainCosts = {\n  [GRASS]: 10,\n  [TREE]: 20,\n  [PATH]: 5,\n  [ROCK]: 50,\n  [WATER]: 100,\n  [PLANTED]: 10,\n  [CROP]: 10,\n  [FARM]: 10,\n  [WAREHOUSE]: 10,\n  'default': 500,\n};\n\nexport const terrainCost = type => terrainCosts[type] || terrainCosts['default'];\n\nexport const itemToNode = ({x, y, type}) => ({x, y, gCost: terrainCost(type)});\n\nexport const itemsToNodes = items => items.map(itemToNode);\n\nexport const getCallbacks = nodes => goal => ({\n  // It should return id / key / hash for a node\n  id,\n  // It should check: is a node is the goal?\n  isGoal: equalsNode(goal),\n  // It should return an array of successors / neighbors / children\n  getSuccessors: getSuccessorsFromNodes(nodes),\n  // g(x). It should return the cost of path between two nodes\n  distance,\n  // h(x). It should return the cost of path from a node to the goal\n  estimate,\n});\n\nexport default function findPath(start, goal, nodes) {\n  const filteredNodes = nodeMap(nodes);\n  const source = filteredNodes.get(id(start));\n  const target = filteredNodes.get(id(goal));\n  return astar(source, target, getCallbacks(filteredNodes)(target))\n}","import {generateId, generateState, PLAYERS} from \"./stateGenerator\";\nimport {\n  getItemById,\n  getItemByXYAndType,\n  getItemsByPlayer,\n  inRange,\n  removeItemById,\n  updateItem,\n  updateItemById,\n  updateItems\n} from \"./itemsUtil\";\nimport {calculateDistance, move} from \"./movement\";\nimport {pipe} from \"./functional\";\nimport {CROP, FARM, GRASS, PATH, PLANTED, WAREHOUSE} from \"./itemTypes\";\nimport {CROP_GROWN, DEFAULT_EVENT, RESOURCE_PICKUP, SLEEPING} from \"./events/eventTypes\";\nimport {hasBehaviorForEvent, isEventVisible} from \"./events/eventUtils\";\nimport findPath, {itemsToNodes, itemToNode} from \"./movement/findPath\";\n\nexport const ATTACK = 'brigands/reducer/ATTACK';\nexport const AUTO_ACTION = 'brigands/reducer/AUTO_ACTION';\nexport const BUILD_FARM = 'brigands/reducer/BUILD_FARM';\nexport const BUILD_WAREHOUSE = 'brigands/reducer/BUILD_WAREHOUSE';\nexport const END_TURN = 'brigands/reducer/END_TURN';\nexport const FINISH_TRAIN_EVENT = 'brigands/reducer/FINISH_TRAIN_EVENT';\nexport const HARVEST_CROP = 'brigands/reducer/HARVEST_CROP';\nexport const MOVE = 'brigands/reducer/MOVE';\nexport const MAKE_PATH = 'brigands/reducer/MAKE_PATH';\nexport const PLANT_CROP = 'brigands/reducer/PLANT_CROP';\nexport const RESTART = 'brigands/reducer/RESTART';\nexport const SET_ACTIVE_EVENT = 'brigands/reducer/SET_ACTIVE_EVENT';\nexport const SET_SELECTED = 'brigands/reducer/SET_SELECTED';\nexport const SET_UNIT_BEHAVIOR = 'brigands/reducer/SET_UNIT_BEHAVIOR';\nexport const TRAIN_EVENT = 'brigands/reducer/TRAIN_EVENT';\nexport const UNLOAD_RESOURCE = 'brigands/reducer/UNLOAD_RESOURCE';\nexport const LOAD_RESOURCE = 'brigands/reducer/LOAD_RESOURCE';\nexport const SLEEP = 'brigands/reducer/SLEEP';\n\nexport const selectItemById = id => state => getItemById(id, state.items);\n\nexport const selectSelectedItem = state => getItemById(state.selectedId, state.items);\n\nexport const selectEventBehavior = behaviorName => eventType => state => {\n  const behavior = state.behaviors[behaviorName] || {};\n  const eventBehavior = behavior[eventType] || {};\n  return eventBehavior.conditionalActions || [];\n};\n\nexport const selectEvents = state => state.events;\n\nexport const selectActivePlayerId = state => state.activePlayerId;\n\nconst nextPlayer = (activePlayerId) => {\n  const index = PLAYERS.findIndex((id) => id === activePlayerId);\n  return PLAYERS[(index + 1) % PLAYERS.length];\n};\n\nconst nextTurn = (turn, activePlayerId) => PLAYERS.slice(-1)[0] === activePlayerId ? turn + 1 : turn;\n\nconst delegateToReducer = action => state => reducer(state, action);\n\nconst consumeAp = action => state => {\n  const {getAgent, apCost = () => () => 10} = action.payload;\n  const agent = getAgent(state);\n  return updateItem({...agent, ap: agent.ap - apCost(action)(state)})(state)\n};\n\nconst recordAction = action => state => {\n  const {getAgent} = action.payload;\n  const agent = getAgent(state);\n  return !agent.training ? state : updateItem(\n    {\n      ...agent,\n      behaviorTraining: {\n        ...agent.behaviorTraining,\n        conditionalActions: [...agent.behaviorTraining.conditionalActions, action]\n      }\n    })(state);\n};\n\nconst postAction = action => state => {\n  return pipe(consumeAp(action), recordAction(action))(state);\n};\n\nconst createBuilding = (getAgent, type, state) => {\n  const builder = getAgent(state);\n  const target = getItemByXYAndType(state.items)(builder)(GRASS);\n  return createBuildingOn(getAgent)(type)(target.id)(state);\n};\n\nconst createBuildingOn = getAgent => buildingType => targetId => state => {\n  const builder = getAgent(state);\n  const clearedItems = removeItemById(targetId, state.items);\n  const building = {\n    id: generateId(),\n    builderId: builder.id,\n    x: builder.x,\n    y: builder.y,\n    type: buildingType,\n    createdTurn: state.turn,\n    resources: [],\n  };\n  return {...state, items: [...clearedItems, building]}\n};\n\nconst plantedShouldGrow = turn => item => item.type === PLANTED && item.createdTurn + 5 <= turn;\n\nconst getNextActions = getAgent => state => {\n  const {conditionalActions} = getAgent(state);\n  const index = conditionalActions.findIndex(conditionalAction => conditionalAction.payload.condition(getAgent)(state));\n  return index >= 0 ? conditionalActions.slice(index) : [];\n};\n\nconst getNextAction = getAgent => state => conditionalActions => conditionalActions.find(conditionalAction => conditionalAction.payload.condition(getAgent)(state));\n\nexport const endTurn = () => ({type: END_TURN,});\n\n//TODO different range depending on type\nconst attackCondition = getTarget => getAgent => state => calculateDistance(getAgent(state))(getTarget(getAgent)(state)) <= 1;\n\nexport const attack = getAgent => getTarget => {\n  return {\n    type: ATTACK,\n    payload: {\n      getAgent,\n      getTarget,\n      condition: attackCondition(getTarget),\n    }\n  }\n};\n\nexport const setUnitBehaviorAction = getAgent => ({\n  type: SET_UNIT_BEHAVIOR,\n  payload: {\n    getAgent,\n  }\n});\n\nexport const autoAction = getAgent => ({\n  type: AUTO_ACTION,\n  payload: {\n    getAgent,\n  }\n});\n\nconst buildingTypeExists = type => getAgent => state => {\n  return !state.items.some((item) => item.type === type) && getItemByXYAndType(state.items)(getAgent(state))(GRASS);\n};\n\nexport const buildWarehouse = getAgent => {\n  return {\n    type: BUILD_WAREHOUSE,\n    payload: {\n      getAgent,\n      condition: buildingTypeExists(WAREHOUSE),\n    }\n  }\n};\n\nconst farmerHasFarm = getAgent => state => {\n  return state.items.some((item) => item.type === FARM && item.builderId === getAgent(state).id);\n};\n\nconst farmCondition = getAgent => state => !farmerHasFarm(getAgent)(state) && getItemByXYAndType(state.items)(getAgent(state))(GRASS);\n\nexport const buildFarm = getAgent => {\n  return {\n    type: BUILD_FARM,\n    payload: {\n      getAgent,\n      condition: farmCondition,\n    }\n  }\n};\n\nconst plantCropCondition = getAgent => state => farmerHasFarm(getAgent)(state) && getItemByXYAndType(state.items)(getAgent(state))(GRASS);\n\nexport const plantCrop = getAgent => {\n  return {\n    type: PLANT_CROP,\n    payload: {\n      getAgent,\n      condition: plantCropCondition,\n    }\n  }\n};\n\nconst harvestCropCondition = getAgent => state => getItemByXYAndType(state.items)(getAgent(state))(CROP);\n\nexport const harvestCrop = getAgent => {\n  return {\n    type: HARVEST_CROP,\n    payload: {\n      getAgent,\n      condition: harvestCropCondition,\n    }\n  }\n};\n\nconst moveCondition = getTarget => getAgent => state => {\n  const agent = getAgent(state);\n  const target = getTarget(getAgent)(state);\n  return agent && target && !(agent.x === target.x && agent.y === target.y);\n};\n\nexport const moveTowardTarget = getAgent => getTarget => {\n  const condition = moveCondition(getTarget);\n  //TODO move apCost to reducer\n  const apCost = action => state => 0;\n  return {\n    type: MOVE,\n    payload: {\n      getAgent,\n      getTarget,\n      apCost,\n      condition,\n    }\n  }\n};\n\nconst makePathTarget = getAgent => state => getItemByXYAndType(state.items)(getAgent(state))(GRASS);\n\nconst makePathCondition = getTarget => getAgent => state => !!getTarget(getAgent)(state);\n\nexport const makePath = getAgent => ({\n  type: MAKE_PATH,\n  payload: {\n    getAgent,\n    getTarget: makePathTarget,\n    condition: makePathCondition(makePathTarget),\n  }\n});\n\nconst unloadResourceCondition = getAgent => state => {\n  const agent = getAgent(state);\n  const getByType = getItemByXYAndType(state.items)(agent);\n  return agent.resources.length > 0 && (getByType(FARM) || getByType(WAREHOUSE));\n};\n\nexport const unloadResource = getAgent => {\n  return {\n    type: UNLOAD_RESOURCE,\n    payload: {\n      getAgent,\n      condition: unloadResourceCondition,\n    }\n  }\n};\n\nconst loadResourceCondition = getAgent => state => {\n  const agent = getAgent(state);\n  const getByType = getItemByXYAndType(state.items)(agent);\n  const target = getByType(FARM) || getByType(WAREHOUSE) || {};\n  return !!target.resources && target.resources.length > 0;\n};\n\nexport const loadResource = getAgent => {\n  return {\n    type: LOAD_RESOURCE,\n    payload: {\n      getAgent,\n      condition: loadResourceCondition,\n    }\n  }\n};\n\nexport const setActiveEvent = getAgent => event => ({\n  type: SET_ACTIVE_EVENT,\n  payload: {\n    getAgent,\n    event,\n  }\n});\n\nexport const trainEventBehavior = getAgent => event => ({\n  type: TRAIN_EVENT,\n  payload: {\n    getAgent,\n    event,\n  }\n});\n\nexport const finishTrainEventBehavior = getAgent => ({\n  type: FINISH_TRAIN_EVENT,\n  payload: {\n    getAgent,\n  }\n});\n\nexport const restart = () => ({type: RESTART, payload: undefined});\n\nexport const setSelectedItem = id => ({type: SET_SELECTED, payload: id});\n\nexport const sleepOneTurn = getAgent => turn => {\n  const condition = getAgent => state => state.turn <= turn;\n  return {\n    type: SLEEP,\n    payload: {\n      getAgent,\n      condition\n    }\n  };\n};\n\nconst createEvent = type => itemId => turn => ({\n  id: generateId(),\n  type,\n  itemId,\n  turn,\n  local: false,\n});\n\nconst createLocalEvent = type => itemId => turn => agentId => ({\n  ...createEvent(type)(itemId)(turn),\n  agentId,\n  local: true,\n});\n\nconst publishEvents = events => state => {\n  return {...state, events: [...state.events, ...events]}\n};\n//TODO hack, WAREHOUSE is only building that any unit can build\nconst isHome = target => agent => target.builderId === agent.id && target.type !== WAREHOUSE;\n\nconst updateItemsByActivePlayer = fn => state => {\n  const updates = getItemsByPlayer(selectActivePlayerId(state), state.items).map(item => updateItem(fn(item)));\n  return pipe(...updates)(state);\n};\n\nconst replenishAp = state => {\n  const updateFn = item => ({...item, ap: item.ap > 0 ? 10 : item.ap + 10});\n  return updateItemsByActivePlayer(updateFn)(state);\n};\n\nconst cropsGrownEvents = state => {\n  const grownCrops = state.items.filter(plantedShouldGrow(state.turn));\n  const cropEvents = grownCrops.map((item) => (createLocalEvent(CROP_GROWN)(item.id)(state.turn)(item.builderId)));\n  return {...state, events: [...state.events, ...cropEvents]}\n};\n\nconst growCrops = state => updateItems(plantedShouldGrow(state.turn))({type: CROP,})(state);\n\nconst filterOldEvents = state => ({\n  ...state,\n  events: state.events.filter(e => e.turn === state.turn)\n});\n\nconst addEventsToUnits = state => {\n  const updateFn = item => (\n    {\n      ...item,\n      events: [...item.events, ...state.events.filter(event => isEventVisible(item.id)(event) && (hasBehaviorForEvent(item)(event)(state) || item.training))]\n    });\n  return updateItemsByActivePlayer(updateFn)(state);\n};\n\nconst setNextTurn = state => ({...state, turn: nextTurn(state.turn, selectActivePlayerId(state))});\n\nconst setNextPlayer = state => ({\n  ...state,\n  activePlayerId: nextPlayer(selectActivePlayerId(state))\n});\n\nconst updateConditionalActions = getAgent => state => {\n  const nextActions = getNextActions(getAgent)(state);\n  return updateItem({...getAgent(state), conditionalActions: nextActions})(state);\n};\n\nconst performCurrentAction = getAgent => state => {\n  const actions = getAgent(state).conditionalActions;\n  return actions.length > 0 ? delegateToReducer(actions[0])(state) : state;\n};\n\nexport default function reducer(state, action) {\n  console.log('Action');\n  console.log(action);\n  const {payload} = action;\n  switch (action.type) {\n    case END_TURN: {\n      return pipe(replenishAp, cropsGrownEvents, growCrops, filterOldEvents, addEventsToUnits, setNextTurn, setNextPlayer)(state);\n    }\n    case AUTO_ACTION: {\n      const {getAgent} = payload;\n      const agent = getAgent(state);\n      if (agent.ap <= 0) {\n        return state;\n      }\n      //TODO simplify\n      const nextActions = getNextActions(getAgent)(state);\n      return nextActions.length > 0 ? pipe(updateConditionalActions(getAgent), performCurrentAction(getAgent), delegateToReducer(action))(state) : pipe(delegateToReducer(setUnitBehaviorAction(getAgent)), delegateToReducer(action))(state);\n    }\n    case RESTART: {\n      const behaviors = state.behaviors;\n      return {...generateState(), behaviors};\n    }\n    case SET_SELECTED: {\n      return {...state, selectedId: payload};\n    }\n    case ATTACK: {\n      const {getAgent, getTarget} = payload;\n      const attacker = getAgent(state);\n      const target = getTarget(getAgent)(state);\n\n      if (!inRange(attacker, target)) {\n        console.log('target not in range!');\n        return state;\n      }\n      const updatedTarget = {...target, hp: target.hp - 1};\n      return pipe(updateItem(updatedTarget), postAction(action))(state)\n    }\n    case MOVE: {\n      const {getAgent, getTarget} = payload;\n      const nodes = itemsToNodes(state.items);\n      const path = findPath(itemToNode(getAgent(state)), itemToNode(getTarget(getAgent)(state)), nodes);\n      const moveAgent = (s) => updateItem(move(getAgent(s), path[1]))(s);\n      return pipe(moveAgent, delegateToReducer(makePath(getAgent)), postAction(action))(state);\n    }\n    case MAKE_PATH: {\n      const {getAgent, getTarget, condition} = payload;\n      if (condition(getAgent)(state)) {\n        const target = getTarget(getAgent)(state);\n        //TODO ensure that visited always exists instead of null check\n        const visited = target.visited ? [...target.visited, state.turn] : [state.turn];\n        const type = visited.length > 3 ? PATH : target.type;\n        return updateItem({...target, visited, type})(state);\n      }\n      return state;\n    }\n    case BUILD_FARM: {\n      return createBuilding(payload.getAgent, FARM, postAction(action)(state));\n    }\n    case BUILD_WAREHOUSE: {\n      return createBuilding(payload.getAgent, WAREHOUSE, postAction(action)(state));\n    }\n    case PLANT_CROP: {\n      return createBuilding(payload.getAgent, PLANTED, postAction(action)(state));\n    }\n    case HARVEST_CROP: {\n      const agent = payload.getAgent(state);\n      const target = getItemByXYAndType(state.items)(agent)(CROP);\n      const addedResourceState = updateItemById({\n        ...agent,\n        resources: [...agent.resources, CROP]\n      }, state);\n      return createBuildingOn(payload.getAgent)(GRASS)(target.id)(postAction(action)(addedResourceState));\n    }\n    case LOAD_RESOURCE: {\n      const agent = payload.getAgent(state);\n      const getByType = getItemByXYAndType(state.items)(agent);\n      const target = getByType(FARM) || getByType(WAREHOUSE);\n      const resource = target.resources[0];\n      const updatedAgent = {...agent, resources: [...agent.resources, resource]};\n      const updatedTarget = {...target, resources: target.resources.slice(1)};\n\n      return pipe(updateItem(updatedAgent), updateItem(updatedTarget), postAction(action))(state);\n    }\n    case UNLOAD_RESOURCE: {\n      const agent = payload.getAgent(state);\n      const getByType = getItemByXYAndType(state.items)(agent);\n      const target = getByType(FARM) || getByType(WAREHOUSE);\n      const resource = agent.resources[0];\n      const updatedTarget = {...target, resources: [...target.resources, resource]};\n      const updatedAgent = {...agent, resources: agent.resources.slice(1)};\n      if (isHome(target)(agent)) {\n        const event = {...createEvent(RESOURCE_PICKUP)(target.id)(state.turn), resource};\n        return pipe(updateItem(updatedAgent), updateItem(updatedTarget), publishEvents([event]), postAction(action))(state);\n      }\n      return pipe(updateItem(updatedAgent), updateItem(updatedTarget), postAction(action))(state);\n    }\n    case TRAIN_EVENT: {\n      const {getAgent, event} = payload;\n      const agent = getAgent(state);\n      return updateItemById({\n        ...agent,\n        behaviorTraining: {\n          name: agent.behaviorName,\n          eventType: event.type,\n          event,\n          conditionalActions: []\n        },\n        training: true,\n      }, state);\n    }\n    case FINISH_TRAIN_EVENT: {\n      const {getAgent} = payload;\n      const agent = getAgent(state);\n      const {name, eventType, conditionalActions} = agent.behaviorTraining;\n      const behavior = state.behaviors[name] || {};\n      const updatedBehavior = {\n        ...behavior,\n        name,\n        [eventType]: {\n          eventType,\n          conditionalActions,\n        },\n      };\n      const updatedBehaviorState = {\n        ...state,\n        behaviors: {...state.behaviors, [name]: updatedBehavior}\n      };\n      return updateItemById({\n        ...agent,\n        behaviorTraining: {},\n        conditionalActions,\n        training: false,\n      }, updatedBehaviorState);\n\n    }\n    case SET_ACTIVE_EVENT : {\n      const {event, getAgent} = payload;\n      const agent = getAgent(state);\n      return updateItemById({...agent, activeEvent: event}, state);\n    }\n    case SET_UNIT_BEHAVIOR: {\n      //TODO call SET_ACTIVE_EVENT or refactor\n      const {getAgent} = payload;\n      const agent = getAgent(state);\n      const activeEvent = agent.events.length > 0 ? agent.events[0] : {type: DEFAULT_EVENT};\n      const conditionalActions = selectEventBehavior(agent.behaviorName)(activeEvent.type)(state);\n      const unitActions = conditionalActions.map(conditionalAction => {\n          return {\n            ...conditionalAction,\n            payload: {...conditionalAction.payload, getAgent}\n          }\n        }\n      );\n\n      //TODO quickfix to stop endless recursion if there is no valid action for DEFAULT_EVENT\n      console.log(unitActions);\n      if (activeEvent.type === DEFAULT_EVENT && !getNextAction(getAgent)(state)(unitActions)) {\n        return reducer(state, sleepOneTurn(getAgent)(state.turn));\n      }\n      console.log('Updated actions for event: ' + activeEvent.type);\n      return updateItemById({\n        ...agent,\n        activeEvent,\n        events: agent.events.slice(1),\n        conditionalActions: [...unitActions]\n      }, state);\n    }\n    case SLEEP: {\n      const {getAgent} = payload;\n      const agent = getAgent(state);\n      return pipe(updateItem({\n        ...agent,\n        activeEvent: {type: SLEEPING},\n        conditionalActions: [action]\n      }), consumeAp(action))(state)\n    }\n    default:\n      return state;\n  }\n};\n","import React, {useContext} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport {ReducerDispatch} from \"./App\";\nimport {setSelectedItem} from \"./reducer\";\nimport {\n  CROP,\n  DEAD,\n  FARM,\n  GRASS,\n  HUMAN,\n  MOUNTED,\n  PATH,\n  PLANTED,\n  PLAYER2,\n  ROCK,\n  TREE,\n  WAREHOUSE,\n  WATER\n} from \"./itemTypes\";\n\nconst typeIcons = {\n  [PLAYER2]: 'android',\n  [HUMAN]: 'directions_walk',\n  [MOUNTED]: 'direction_bike',\n  [GRASS]: 'crop_free',\n  [TREE]: 'nature',\n  [WATER]: 'waves',\n  [ROCK]: 'landscape',\n  [DEAD]: 'airline_seat_flat',\n  [FARM]: 'home',\n  [CROP]: 'local_florist',\n  [PLANTED]: 'minimize',\n  [WAREHOUSE]: 'layers',\n  [PATH]: 'grain',\n\n};\n\nconst getIcon = (elem) => elem.hp < 1 ? typeIcons[DEAD] : typeIcons[elem.type] || typeIcons[GRASS];\n\nconst createMatrix = (n = 10, items) => {\n  let matrix = [];\n  for (let y = 0; y < n; y++) {\n    matrix[y] = [];\n    for (let x = 0; x < n; x++) {\n      matrix[y][x] = createAtPosition(items, x, y);\n    }\n  }\n  return matrix;\n};\n\nconst createAtPosition = (items = [], x, y) => {\n  return items.find((item) => item.x === x && item.y === y) || {x: x, y: y, type: '.'}\n};\n\nfunction PlayingFieldCell({elem}) {\n  const {dispatch} = useContext(ReducerDispatch);\n  const handleSetSelected = (id) => () => {\n    dispatch(setSelectedItem(id));\n  };\n  return (\n    <TableCell>\n      <IconButton\n        onClick={handleSetSelected(elem.id)}><Icon>{getIcon(elem)}</Icon></IconButton>\n    </TableCell>);\n}\n\nexport default function PlayingField() {\n  const {items} = useContext(ReducerDispatch).state;\n  const matrix = createMatrix(10, items);\n  return <div className=\"PlayingField\">\n    <Table padding=\"none\">\n      <TableBody>\n        {\n          (matrix.map(row =>\n            <TableRow key={row[0].y}>{\n              row.map(elem => <PlayingFieldCell key={'x' + elem.x + 'y' + elem.y} elem={elem}/>)}\n            </TableRow>))\n        }\n      </TableBody>\n    </Table>\n  </div>;\n}\n","import React, {useContext} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport {getEnemyItems, getItemsByPlayer} from \"./itemsUtil\";\nimport {ReducerDispatch} from \"./App\";\nimport {\n  attack,\n  autoAction,\n  buildFarm,\n  buildWarehouse,\n  endTurn,\n  harvestCrop,\n  loadResource,\n  moveTowardTarget,\n  plantCrop,\n  selectItemById,\n  selectSelectedItem,\n  unloadResource\n} from \"./reducer\";\nimport {compareDistance} from \"./movement\";\nimport {FARM, GRASS, WAREHOUSE} from \"./itemTypes\";\n\nconst unitHasAp = getAgent => state => {\n  const item = getAgent(state);\n  return item.ap > 0 && item.playerId === state.activePlayerId;\n};\n\nconst playerItemsWithAp = (playerId) => (items) => {\n  return getItemsByPlayer(playerId, items)\n    .filter(item => item.ap > 0);\n};\n\nfunction OrderButton({action, children}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  if (!shouldDisplayOrder(action)(state)) {\n    return null;\n  }\n  const handleAction = () => dispatch(action);\n  return (<Button onClick={handleAction}>{children}</Button>);\n}\n\nfunction TurnButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const {items, activePlayerId} = state;\n  const handleEndTurn = (playerId) => () => {\n    const playerItems = playerItemsWithAp(playerId)(items);\n    playerItems.forEach(playerItem => {\n      dispatch(autoAction(selectItemById(playerItem.id)));\n    });\n    dispatch(endTurn());\n  };\n  return (\n    <Button onClick={handleEndTurn(activePlayerId)}>Turn({activePlayerId}): {state.turn}</Button>\n  );\n}\n\nconst shouldDisplayOrder = action => state => {\n  const {getAgent, condition} = action.payload;\n  return !!getAgent && unitHasAp(getAgent)(state) && condition(getAgent)(state);\n};\n\nfunction AttackButton({targetId}) {\n  const {state} = useContext(ReducerDispatch);\n  const getAgent = selectItemById(state.selectedId);\n  const getTarget = () => selectItemById(targetId);\n  const action = attack(getAgent)(getTarget);\n  return (<OrderButton action={action}>Attack Enemy</OrderButton>);\n}\n\nconst targetClosestType = type => getAgent => state => state.items.filter(item => item.type === type).sort(compareDistance(getAgent(state)))[0];\n\n//TODO separate item type and if it is a home. hardcoding 'farm' as that is the only home type\nconst targetHome = getAgent => state => state.items.filter(item => item.type === FARM && item.builderId === getAgent(state).id)[0];\n\nfunction MoveToGrassButton() {\n  const getTarget = targetClosestType(GRASS);\n  return (<MoveButton getTarget={getTarget} targetName={'Grass'}/>);\n}\n\nconst getActiveEventTarget = getAgent => state => {\n  const {activeEvent} = getAgent(state);\n  return selectItemById(activeEvent.itemId)(state);\n};\n\nfunction MoveToEventButton() {\n  return (<MoveButton getTarget={getActiveEventTarget} targetName={'Event'}/>);\n}\n\nfunction MoveToHomeButton() {\n  return (<MoveButton getTarget={targetHome} targetName={'Home'}/>);\n}\n\nfunction MoveToWarehouseButton() {\n  return (<MoveButton getTarget={targetClosestType(WAREHOUSE)} targetName={'Warehouse'}/>);\n}\n\nfunction MoveButton({getTarget, targetName,}) {\n  const {state} = useContext(ReducerDispatch);\n  const getAgent = selectItemById(state.selectedId);\n  const action = moveTowardTarget(getAgent)(getTarget);\n  return (<OrderButton action={action}>Move To {targetName}</OrderButton>);\n}\n\nfunction BuildWarehouseButton() {\n  const {state} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  const getAgent = selectItemById(agent.id);\n  const action = buildWarehouse(getAgent);\n  return (<OrderButton action={action}>Build warehouse</OrderButton>);\n}\n\nfunction BuildFarmButton() {\n  const {state} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  const getAgent = selectItemById(agent.id);\n  const action = buildFarm(getAgent);\n  return (<OrderButton action={action}>Build farm</OrderButton>);\n}\n\nfunction PlantCropButton() {\n  const {state} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  const getAgent = selectItemById(agent.id);\n  const action = plantCrop(getAgent);\n  return (<OrderButton action={action}>PlantCrop</OrderButton>);\n}\n\nfunction HarvestCropButton() {\n  const {state} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  const getAgent = selectItemById(agent.id);\n  const action = harvestCrop(getAgent);\n  return (<OrderButton action={action}>HarvestCrop</OrderButton>);\n}\n\nfunction UnloadResourceButton() {\n  const {state} = useContext(ReducerDispatch);\n  const getAgent = selectItemById(state.selectedId);\n  const action = unloadResource(getAgent);\n  return (<OrderButton action={action}>Unload Resource</OrderButton>);\n}\n\nfunction LoadResourceButton() {\n  const {state} = useContext(ReducerDispatch);\n  const getAgent = selectItemById(state.selectedId);\n  const action = loadResource(getAgent);\n  return (<OrderButton action={action}>Load Resource</OrderButton>);\n}\n\nexport default function Orders() {\n  const {state} = useContext(ReducerDispatch);\n  return <div>\n    <Card>\n      <CardContent>\n        <TurnButton/>\n        {\n          getEnemyItems(state).map((enemy) => <AttackButton key={enemy.id} targetId={enemy.id}/>)\n        }\n        <MoveToGrassButton/>\n        <MoveToEventButton/>\n        <MoveToHomeButton/>\n        <MoveToWarehouseButton/>\n        <BuildWarehouseButton/>\n        <BuildFarmButton/>\n        <PlantCropButton/>\n        <HarvestCropButton/>\n        <UnloadResourceButton/>\n        <LoadResourceButton/>\n      </CardContent>\n    </Card>\n  </div>\n}\n","import React, {useContext} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {ReducerDispatch} from \"./App\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  finishTrainEventBehavior,\n  selectItemById,\n  selectSelectedItem,\n  setActiveEvent,\n  trainEventBehavior\n} from \"./reducer\";\nimport {DEFAULT_EVENT} from \"./events/eventTypes\";\nimport {isEventVisible} from \"./events/eventUtils\";\n\nfunction UnitCard() {\n  const {state} = useContext(ReducerDispatch);\n  const selected = selectSelectedItem(state);\n  if (selected === undefined) {\n    return null;\n  }\n  const {id, playerId, x, y, hp, ap, type, behaviorName, resources} = selected;\n  const maxHp = 5;\n  const relativeHp = hp / maxHp * 100;\n  const defaultEvent = {type: DEFAULT_EVENT, itemId: selected.id};\n  return (\n    <Card>\n      <CardContent>\n        <Typography>id:{id}</Typography>\n        <Typography>player:{playerId}</Typography>\n        <Typography>x:{x}</Typography>\n        <Typography>y:{y}</Typography>\n        <Typography>hp:{hp}</Typography>\n        <Typography>ap:{ap}</Typography>\n        <Typography>type:{type}</Typography>\n        <Typography>behavior:{behaviorName}</Typography>\n        <Typography>resource: {resources} </Typography>\n        <LinearProgress variant=\"determinate\" value={relativeHp}/>\n        <TrainEventButton event={defaultEvent}/>\n        <FinishTrainEventButton/>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction SelectEventButton({event}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const getAgent = selectSelectedItem;\n  const agent = getAgent(state);\n  if (agent === undefined || agent.activeEvent === event) {\n    return null;\n  }\n  const handleSelectEvent = () => dispatch(setActiveEvent(getAgent)(event));\n  return (<Button color='default' onClick={handleSelectEvent}>Select event {event.type}</Button>);\n}\n\nfunction TrainEventButton({event}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const getAgent = selectItemById(state.selectedId);\n  const agent = getAgent(state);\n  if (!agent || agent.training) {\n    return null;\n  }\n  const handleTrainEvent = () => {\n    dispatch(setActiveEvent(getAgent)(event));\n    dispatch(trainEventBehavior(getAgent)(event));\n  };\n  return (<Button color='default' onClick={handleTrainEvent}>Train {event.type} Behavior</Button>);\n}\n\nfunction FinishTrainEventButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const getAgent = selectItemById(state.selectedId);\n  const agent = getAgent(state);\n  if (!agent || !agent.training) {\n    return null;\n  }\n  const handleTrainEvent = () => dispatch(finishTrainEventBehavior(getAgent));\n  return (\n    <Button color='default' onClick={handleTrainEvent}>Finish train event Behavior</Button>);\n}\n\nfunction EventCard({event}) {\n  const {state} = useContext(ReducerDispatch);\n  const {x, y, type} = (event.itemId ? selectItemById(event.itemId)(state) || {} : {});\n  return (\n    <Card>\n      <CardContent>\n        <Typography>type:{event.type}</Typography>\n        <Typography>x:{x}</Typography>\n        <Typography>y:{y}</Typography>\n        <Typography>itemType:{type}</Typography>\n        <SelectEventButton event={event}/>\n        <TrainEventButton event={event}/>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction EventsInfo() {\n  const {state} = useContext(ReducerDispatch);\n  const {events} = state;\n  const selectedUnit = selectSelectedItem(state);\n  const visibleEvents = events.filter(isEventVisible(selectedUnit.id));\n  const newEvents = selectedUnit.activeEvent ? [selectedUnit.activeEvent, ...visibleEvents] : visibleEvents;\n  return newEvents.map((event, index) => <EventCard key={\"event\" + index} event={event}/>);\n}\n\nexport default function InfoPane() {\n  return <div>\n    <UnitCard/>\n    <EventsInfo/>\n  </div>\n}\n","import React, {useContext} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {ReducerDispatch} from \"./App\";\nimport {restart} from \"./reducer\";\n\nexport default function WinDialog() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n\n\n  const handleRestart = () => dispatch(restart());\n  return (\n    <div>\n      <Dialog open={!!state.winner} aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\">\n        <DialogTitle id=\"alert-dialog-title\">{`The winner is ${state.winner}!`}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">Play another round?</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">Yes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, {useReducer} from 'react';\nimport './App.css';\nimport PlayingField from './PlayingField';\nimport Orders from './Orders';\nimport InfoPane from './InfoPane';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport WinDialog from \"./WinDialog\";\nimport reducer from \"./reducer\";\nimport {generateState} from \"./stateGenerator\";\n\nexport const ReducerDispatch = React.createContext(null);\n\nconst initialState = generateState();\n\nexport default function App() {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n      <Grid container justify=\"center\" direction=\"row\" spacing={24}>\n        <ReducerDispatch.Provider value={{state, dispatch}}>\n          <WinDialog/>\n          <Grid item xs>\n            <InfoPane/>\n          </Grid>\n          <Grid item xs>\n            <PlayingField size=\"10\"/>\n          </Grid>\n          <Grid item xs={4}>\n            <Orders/>\n          </Grid>\n        </ReducerDispatch.Provider>\n      </Grid>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}