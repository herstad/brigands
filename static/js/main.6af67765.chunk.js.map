{"version":3,"sources":["PlayingField.js","movement.js","reducer.js","stateGenerator.js","itemsUtil.js","Orders.js","InfoPane.js","WinDialog.js","App.js","serviceWorker.js","index.js"],"names":["typeIcons","o","x","mounted","grass","tree","water","rock","dead","farm","crop","planted","getIcon","elem","hp","type","createMatrix","n","arguments","length","undefined","items","matrix","y","createAtPosition","find","item","PlayingFieldCell","_ref","id","dispatch","useContext","ReducerDispatch","react_default","a","createElement","TableCell_default","IconButton_default","onClick","payload","Icon_default","PlayingField","state","className","Table_default","padding","TableBody_default","map","row","TableRow_default","key","toward","target","mover","xd","yd","Math","abs","sign","move","direction","_direction","Object","objectSpread","selectItemById","getItemById","selectSelectedItem","selectedId","selectEvents","events","nextPlayer","activePlayerId","index","PLAYERS","findIndex","getWinner","isLoser","playerId","getItemsByPlayer","every","consumeAp","action","condition","agent","agentId","getAgent","selectedItem","ap","training","conditionalAction","behaviorTraining","conditionalActions","push","slice","updateItemById","createBuilding","builderId","builder","getItemByXYAndType","clearedItems","removeItemById","building","generateId","createdTurn","turn","concat","toConsumableArray","plantedShouldGrow","reducer","console","log","behaviorName","apItems","updateItems","isPlayer","grownCrops","filter","newCrops","replaceItems","cropEvents","itemId","e","winner","generateState","getTarget","consumedState","attacker","inRange","_selectItemById","targetId","event","name","eventType","_agent$behaviorTraini","behavior","behaviors","updatedBehavior","defineProperty","updatedBehaviorState","selectEventBehavior","generateItems","size","units","genPos","generatePosition","defaultValues","i","generateDefaultItems","points","generateRandomMatrix","shift","array","Array","from","keys","flat","shuffleArray","j","floor","random","matchPlayer","findItemByType","getItemsByXY","getEnemyItems","player","flatMap","otherPlayer","range","updatedItem","updateItemByIdFn","replacements","obj","predicate","updateItemFn","el","unitHasAp","farmerHasFarm","some","getButtonColor","isSelectedAction","playerItemsWithAp","getNextAction","setDefaultAction","getNextActions","TurnButton","_useContext","Button_default","forEach","AttackButton","_useContext2","color","moveCondition","compareDistance","firstEl","secondEl","distance","calculateDistance","targetClosestType","sort","handleMove","MoveToGrassButton","_useContext3","handleMoveToGrass","MoveToEventsButton","MoveToEventButton","_ref2","_useContext5","handleMoveToEvent","BuildFarmButton","_useContext6","PlantCropButton","_useContext7","HarvestCropButton","_useContext8","Orders","Card_default","CardContent_default","enemy","UnitCard","selected","relativeHp","defaultEvent","Typography_default","LinearProgress_default","variant","value","TrainEventButton","FinishTrainEventButton","EventCard","_ref3","EventsInfo","InfoPane","WinDialog","Dialog_default","open","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","React","createContext","initialState","Boolean","window","location","hostname","match","ReactDOM","render","_useReducer","useReducer","_useReducer2","slicedToArray","CssBaseline_default","Grid_default","container","justify","spacing","Provider","xs","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6af67765.chunk.js","sourcesContent":["import React, {useContext} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport {ReducerDispatch} from \"./App\";\n\nconst typeIcons = {\n  o: 'android',\n  x: 'directions_walk',\n  mounted: 'direction_bike',\n  grass: 'crop_free',\n  tree: 'nature',\n  water: 'waves',\n  rock: 'landscape',\n  dead: 'airline_seat_flat',\n  farm: 'home',\n  crop: 'local_florist',\n  planted: 'minimize',\n\n};\n\nconst getIcon = (elem) => elem.hp < 1 ? typeIcons['dead'] : typeIcons[elem.type] || 'crop_free';\n\nconst createMatrix = (n = 10, items) => {\n  let matrix = [];\n  for (let y = 0; y < n; y++) {\n    matrix[y] = [];\n    for (let x = 0; x < n; x++) {\n      matrix[y][x] = createAtPosition(items, x, y);\n    }\n  }\n  return matrix;\n};\n\nconst createAtPosition = (items = [], x, y) => {\n  return items.find((item) => item.x === x && item.y === y) || {x: x, y: y, type: '.'}\n};\n\nfunction PlayingFieldCell({elem}) {\n  const {dispatch} = useContext(ReducerDispatch);\n  const handleSetSelected = (id) => () => {\n    dispatch({type: 'SET_SELECTED', payload: id});\n  };\n  return (\n    <TableCell>\n      <IconButton\n        onClick={handleSetSelected(elem.id)}><Icon>{getIcon(elem)}</Icon></IconButton>\n    </TableCell>);\n}\n\nexport default function PlayingField() {\n  const {items} = useContext(ReducerDispatch).state;\n  const matrix = createMatrix(10, items);\n  return <div className=\"PlayingField\">\n    <Table padding=\"none\">\n      <TableBody>\n        {\n          (matrix.map(row =>\n            <TableRow key={row[0].y}>{\n              row.map(elem => <PlayingFieldCell key={'x' + elem.x + 'y' + elem.y} elem={elem}/>)}\n            </TableRow>))\n        }\n      </TableBody>\n    </Table>\n  </div>;\n}\n","export const toward = target => mover => {\n  const xd = target.x - mover.x;\n  const yd = target.y - mover.y;\n  return Math.abs(xd) > Math.abs(yd) ? {x: Math.sign(xd), y: 0} : {x: 0, y: Math.sign(yd)};\n};\n\nexport const move = (mover, direction) => {\n  const {x, y} = direction(mover);\n  return {...mover, x: (mover.x + x), y: (mover.y + y)}\n};","import {generateId, generateState, PLAYERS} from \"./stateGenerator\";\nimport {\n  getItemById,\n  getItemByXYAndType,\n  getItemsByPlayer,\n  inRange,\n  isPlayer,\n  removeItemById,\n  replaceItems,\n  updateItemById,\n  updateItems\n} from \"./itemsUtil\";\nimport {move, toward} from \"./movement\";\n\nexport const selectItemById = id => state => getItemById(id, state.items);\n\nexport const selectSelectedItem = (state) => getItemById(state.selectedId, state.items);\n\nconst selectEventBehavior = behaviorName => eventType => state => {\n  const behavior = state.behaviors[behaviorName] || {};\n  const eventBehavior = behavior[eventType] || {};\n  return eventBehavior.conditionalActions || [];\n};\n\nexport const selectEvents = state => state.events;\n\nconst nextPlayer = (activePlayerId) => {\n  const index = PLAYERS.findIndex((id) => id === activePlayerId);\n  return PLAYERS[(index + 1) % PLAYERS.length];\n};\n\nconst nextTurn = (turn, activePlayerId) => PLAYERS.slice(-1)[0] === activePlayerId ? turn + 1 : turn;\n\nconst getWinner = (state) => {\n  return isLoser('ai', state.items) ? 'human' : isLoser('human', state.items) ? 'ai' : undefined;\n};\n\nconst isLoser = (playerId, items) => {\n  return getItemsByPlayer(playerId, items).every((item) => item.hp <= 0);\n};\n\nconst consumeAp = (action, state) => {\n  const {condition} = action.payload;\n  // TODO require getAgent\n  const agent = action.payload.agentId !== undefined ? selectItemById(action.payload.agentId)(state) : action.payload.getAgent(state);\n  const selectedItem = {\n    ...agent,\n    ap: 0,\n    action,\n    condition,\n  };\n  // TODO rewrite without if\n  if (!!selectedItem.training) {\n    const conditionalAction = {action, condition};\n    selectedItem.behaviorTraining.conditionalActions.push(conditionalAction);\n  } else {\n    const index = selectedItem.conditionalActions.findIndex(conditionalAction => conditionalAction.action.type === action.type);\n    if (index > 0) {\n      selectedItem.conditionalActions = selectedItem.conditionalActions.slice(index);\n    }\n  }\n  return updateItemById(selectedItem, state);\n};\n\nconst createBuilding = (builderId, type, state) => {\n  const builder = selectItemById(builderId)(state);\n  const target = getItemByXYAndType(state.items)(builder)('grass');\n  const clearedItems = removeItemById(target.id, state.items);\n  const building = {\n    id: generateId(),\n    builderId,\n    x: builder.x,\n    y: builder.y,\n    type,\n    createdTurn: state.turn,\n  };\n  return {...state, items: [...clearedItems, building]}\n};\n\nconst plantedShouldGrow = turn => item => item.type === 'planted' && item.createdTurn + 5 <= turn;\n\nexport default (state, action) => {\n  console.log('Action');\n  console.log(action);\n  console.log('State');\n  console.log(state);\n  const {payload} = action;\n  switch (action.type) {\n    case 'END_TURN': {\n      const apItems = updateItems((item) => isPlayer(payload, item))({ap: 1})(state.items);\n      const grownCrops = apItems.filter(plantedShouldGrow(state.turn));\n      const newCrops = updateItems(plantedShouldGrow(state.turn))({type: 'crop',})(grownCrops);\n      const items = replaceItems(apItems)(newCrops);\n      const cropEvents = newCrops.map((item) => ({\n        type: 'CROP_GROWN',\n        itemId: item.id,\n        turn: state.turn\n      }));\n      const events = [...state.events, ...cropEvents].filter(e => e.turn === state.turn);\n      return {\n        ...state,\n        items,\n        turn: nextTurn(state.turn, state.activePlayerId),\n        activePlayerId: nextPlayer(state.activePlayerId),\n        winner: getWinner(state),\n        events,\n      };\n    }\n    case 'RESTART': {\n      return generateState();\n    }\n    case 'SET_SELECTED': {\n      return {...state, selectedId: payload};\n    }\n    case 'ATTACK': {\n      const {getAgent, getTarget} = payload;\n      const consumedState = consumeAp(action, state);\n      const attacker = getAgent(consumedState);\n      const target = getTarget(consumedState);\n      if (inRange(attacker, target)) {\n        console.log('target in range!');\n        return updateItemById({...target, hp: target.hp - 1}, consumedState);\n      } else {\n        console.log('target not in range!');\n        return updateItemById(move(attacker, toward(target)), consumedState);\n      }\n    }\n    case 'MOVE': {\n      const {getAgent, getTarget} = payload;\n      const consumedState = consumeAp(action, state);\n      const agent = getAgent(consumedState);\n      const target = getTarget(consumedState);\n      return updateItemById(move(agent, toward(target)), consumedState);\n    }\n    case 'BUILD_FARM': {\n      return createBuilding(payload.agentId, 'farm', consumeAp(action, state));\n    }\n    case 'PLANT_CROP': {\n      return createBuilding(payload.agentId, 'planted', consumeAp(action, state));\n    }\n    case 'HARVEST_CROP': {\n      const consumedState = consumeAp(action, state);\n      const {x, y} = selectItemById(payload.targetId)(state);\n      const grass = {\n        id: generateId(),\n        x,\n        y,\n        type: 'grass',\n      };\n      return {\n        ...consumedState,\n        items: [...removeItemById(payload.targetId, consumedState.items), grass],\n      }\n    }\n    case 'TRAIN_EVENT': {\n      const {agentId, event} = payload;\n      return updateItemById({\n        id: agentId,\n        behaviorTraining: {name: 'farmer', eventType: event.type, conditionalActions: []},\n        training: true,\n      }, state);\n    }\n    case 'FINISH_TRAIN_EVENT': {\n      const {agentId} = payload;\n      const agent = selectItemById(agentId)(state);\n      const {name, eventType, conditionalActions} = agent.behaviorTraining;\n      const behavior = state.behaviors[name] || {};\n      const updatedBehavior = {\n        ...behavior,\n        name,\n        [eventType]: {\n          eventType,\n          conditionalActions,\n        },\n      };\n      const updatedBehaviorState = {\n        ...state,\n        behaviors: {...state.behaviors, [name]: updatedBehavior}\n      };\n      return updateItemById({\n        ...agent,\n        behaviorTraining: {},\n        conditionalActions,\n        training: false,\n      }, updatedBehaviorState);\n\n    }\n    case 'SET_UNIT_BEHAVIOR': {\n      const agent = payload.getAgent(state);\n      const conditionalActions = selectEventBehavior(agent.behaviorName)(payload.eventType)(state);\n      console.log('Updated actions for event: ' + payload.eventType);\n      console.log(conditionalActions);\n      return updateItemById({...agent, conditionalActions: [...conditionalActions]}, state);\n    }\n    default:\n      return state;\n  }\n};\n","import {selectItemById} from \"./reducer\";\n\nexport const PLAYERS = ['human', 'ai'];\n\nexport const generateState = () => {\n  console.log(\"generate state\");\n\n  const items = generateItems();\n  return {\n    turn: 0,\n    activePlayerId: PLAYERS[0],\n    items,\n    selectedId: items[0].id,\n    winner: undefined,\n    events: [{type: 'ENEMY_SPOTTED', itemId: items[1].id}, {type: 'GAME_STARTED'}],\n    behaviors: {},\n    training: false,\n  };\n};\n\nlet itemId = 0;\n\nexport const generateId = () => {\n  itemId++;\n  return itemId;\n};\n\nconst generateDefaultItems = (size) => {\n  const defaultValues = [];\n  for (let i = 0; i < size; i++) {\n    defaultValues.push({id: generateId(), type: 'grass'});\n  }\n  return defaultValues;\n};\n\nconst generateItems = (size = 10) => {\n  const units = [\n    {\n      id: generateId(),\n      hp: 5, type: 'x',\n      playerId: 'human',\n      ap: 1,\n      behaviorName: 'farmer',\n      conditionalActions: [\n        {\n          action: {\n            type: 'ATTACK',\n            payload: {\n              getAgent: selectItemById(1),\n              getTarget: selectItemById(2),\n            }\n          },\n          condition: () => true,\n        },\n      ]\n    },\n    {\n      id: generateId(),\n      hp: 5,\n      type: 'o',\n      playerId: 'ai',\n      ap: 1,\n      behaviorName: 'farmer',\n      conditionalActions: [\n        {\n          action: {type: 'FAKE'},\n          condition: () => false\n        },\n      ],\n    },\n  ];\n\n  const items = [\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'tree'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'rock'},\n    {id: generateId(), type: 'water'},\n    {id: generateId(), type: 'water'},\n    {id: generateId(), type: 'water'},\n  ];\n\n  const genPos = generatePosition(size);\n  return genPos(units).concat(genPos(items.concat(generateDefaultItems(size * size - items.length))));\n};\n\nconst generatePosition = (size) => (items) => {\n  const points = generateRandomMatrix(size);\n  return items.map((item) => ({...item, ...points.shift()}));\n};\n\nconst generateRandomMatrix = (size) => {\n  const array = Array.from(Array(size).keys());\n  const matrix = array.map((x) => {\n    return array.map((y) => {\n      return {x, y};\n    })\n  }).flat();\n  shuffleArray(matrix);\n  return matrix;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n};","import {PLAYERS} from \"./stateGenerator\";\n\nexport const isPlayer = (playerId, item) => item.playerId === playerId;\nexport const matchPlayer = (playerId) => (item) => isPlayer(playerId, item);\nexport const getItemById = (id, items) => items.find((item) => item.id === id);\nexport const getItemsByPlayer = (playerId, items) => items.filter(matchPlayer(playerId));\nexport const getItemsByXY = items => ({x, y}) => items.filter((item) => item.x === x && item.y === y);\nexport const getItemByXYAndType = items => selectedItem => type => findItemByType(getItemsByXY(items)(selectedItem))(type);\nexport const findItemByType = items => type => items.find(item => item.type === type);\nexport const removeItemById = (id, items) => items.filter((item) => item.id !== id);\nexport const getEnemyItems = (state) => {\n  const otherPlayers = PLAYERS.filter((player) => state.activePlayerId !== player);\n  return otherPlayers.flatMap((otherPlayer) => getItemsByPlayer(otherPlayer, state.items));\n};\nexport const inRange = (attacker, target, range = 1) => {\n  return Math.abs(target.x - attacker.x) + Math.abs(target.y - attacker.y) <= range;\n};\nexport const updateItemById = (updatedItem, state) => {\n  const items = state.items.map(updateItemByIdFn(updatedItem));\n  return ({...state, items});\n};\n\nexport const replaceItems = items => replacements => {\n  return items.map(obj => replacements.find(o => o.id === obj.id) || obj);\n};\n\nexport const updateItems = predicate => updatedItem => items => {\n  return items.map(updateItemFn(predicate)(updatedItem));\n};\n\nexport const updateItemFn = predicate => updatedItem => {\n  return el => (predicate(el) ? {...el, ...updatedItem} : el);\n};\n\nexport const replaceItemFn = predicate => updatedItem => {\n  return el => (predicate(el) ? updatedItem : el);\n};\n\nexport const updateItemByIdFn = (updatedItem) => {\n  return updateItemFn(el => updatedItem.id === el.id)(updatedItem);\n};\n\nexport const matchId = (id) => {\n  return (item) => item.id === id;\n};","import React, {useContext} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport {getEnemyItems, getItemByXYAndType, getItemsByPlayer} from \"./itemsUtil\";\nimport {ReducerDispatch} from \"./App\";\nimport {selectEvents, selectItemById, selectSelectedItem} from \"./reducer\";\n\n//TODO replace id with getAgent\nconst unitHasAp = id => state => {\n  const item = selectItemById(id)(state);\n  return item.ap > 0 && item.playerId === state.activePlayerId;\n};\n\nconst farmerHasFarm = getAgent => state => {\n  return state.items.some((item) => item.type === 'farm' && item.builderId === getAgent(state).id);\n};\n\nconst getButtonColor = (type, state) => isSelectedAction(type, state) ? 'primary' : 'default';\n\nconst playerItemsWithAp = (playerId) => (items) => {\n  return getItemsByPlayer(playerId, items)\n    .filter(item => item.ap);\n};\n\nconst getNextAction = state => conditionalActions => conditionalActions.find((conditionalAction) => conditionalAction.condition(state));\n\nconst setDefaultAction = item => ({\n  type: 'SET_UNIT_BEHAVIOR',\n  payload: {\n    getAgent: selectItemById(item.id),\n    eventType: 'DEFAULT_EVENT',\n  }\n});\n\nconst getNextActions = (state) => (items) => {\n  return items.map((item) => getNextAction(state)(item.conditionalActions) || ({\n    condition: () => true,\n    action: setDefaultAction(item)\n  }));\n};\n\nconst getItemsWithoutActions = state => items => {\n  return items.filter(item => !getNextAction(state)(item.conditionalActions))\n};\n\nconst isSelectedAction = (type, state) => {\n  const conditionalAction = getNextAction(state)(selectSelectedItem(state).conditionalActions);\n  return conditionalAction && type === conditionalAction.action.type;\n};\n\nfunction TurnButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const {items, activePlayerId} = state;\n  const handleEndTurn = (playerId) => () => {\n\n    // TODO make nicer\n\n    getNextActions(state)(playerItemsWithAp(playerId)(items))\n      .forEach((conditionalAction) => conditionalAction && conditionalAction.condition(state) ? dispatch(conditionalAction.action) : undefined);\n    dispatch({\n      type: 'END_TURN',\n      payload: playerId\n    })\n  };\n  return (\n    <Button onClick={handleEndTurn(activePlayerId)}>Turn({activePlayerId}): {state.turn}</Button>\n  );\n}\n\nfunction AttackButton({targetId}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const condition = unitHasAp(selectSelectedItem(state).id);\n  if (!condition(state)) {\n    return null;\n  }\n  const color = getButtonColor('ATTACK', state);\n  const handleAttack = () => {\n    dispatch({\n      type: 'ATTACK',\n      payload: {\n        getAgent: selectItemById(state.selectedId),\n        getTarget: selectItemById(targetId),\n        condition,\n      }\n    })\n  };\n  return (<Button color={color} onClick={handleAttack}>Attack Enemy</Button>);\n}\n\nconst moveCondition = getTarget => getAgent => state => {\n  const agent = getAgent(state);\n  const target = getTarget(state);\n  return agent && target && unitHasAp(agent.id)(state) && !(agent.x === target.x && agent.y === target.y);\n};\n\nconst calculateDistance = agent => target => Math.abs(agent.x - target.x) + Math.abs(agent.y - target.y);\n\nconst compareDistance = agent => (firstEl, secondEl) => {\n  const distance = calculateDistance(agent);\n  return distance(firstEl) - distance(secondEl);\n};\nconst targetClosestType = getAgent => type => state => state.items.filter(item => item.type === type).sort(compareDistance(getAgent(state)))[0];\n\nconst handleMove = getAgent => getTarget => condition => dispatch => () => {\n  dispatch({\n    type: 'MOVE',\n    payload: {\n      getAgent,\n      getTarget,\n      condition,\n    }\n  })\n};\n\nfunction MoveToGrassButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const getAgent = selectItemById(state.selectedId);\n  const getTarget = targetClosestType(getAgent)('grass');\n  const condition = moveCondition(getTarget)(getAgent);\n  if (!condition(state)) {\n    return null;\n  }\n  const color = getButtonColor('MOVE', state);\n  const handleMoveToGrass = handleMove(getAgent)(getTarget)(condition)(dispatch);\n  return (<Button color={color} onClick={handleMoveToGrass}>Move To Grass</Button>);\n}\n\nfunction MoveToEventsButton() {\n  const {state} = useContext(ReducerDispatch);\n  const events = selectEvents(state).filter(event => event.itemId !== undefined);\n  if (!events) {\n    return null;\n  }\n  return events.map(event => <MoveToEventButton key={event.itemId} event={event}/>);\n}\n\nfunction MoveToEventButton({event}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const getAgent = selectItemById(state.selectedId);\n  const getTarget = selectItemById(event.itemId);\n  const condition = moveCondition(getTarget)(getAgent);\n  if (!condition(state)) {\n    return null;\n  }\n  const color = getButtonColor('MOVE', state);\n  const handleMoveToEvent = handleMove(getAgent)(getTarget)(condition)(dispatch);\n  return (<Button color={color} onClick={handleMoveToEvent}>Move To Event {event.type} </Button>);\n}\n\nfunction BuildFarmButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n\n  const agent = selectSelectedItem(state);\n  const getAgent = selectItemById(agent.id);\n  const condition = state => {\n    return unitHasAp(agent.id)(state)\n      && !farmerHasFarm(getAgent)(state)\n      && getItemByXYAndType(state.items)(agent)('grass');\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handleBuildFarm = () => {\n    dispatch({\n      type: 'BUILD_FARM',\n      payload: {\n        agentId: agent.id,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleBuildFarm}>Build farm</Button>);\n}\n\nfunction PlantCropButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  const getAgent = selectItemById(agent.id);\n  const condition = state => {\n    return unitHasAp(agent.id)(state)\n      && farmerHasFarm(getAgent)(state)\n      && getItemByXYAndType(state.items)(getAgent(state))('grass');\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handlePlantCrop = () => {\n    dispatch({\n      type: 'PLANT_CROP',\n      payload: {\n        agentId: agent.id,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handlePlantCrop}>PlantCrop</Button>);\n}\n\nfunction HarvestCropButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  const getAgent = selectItemById(agent.id);\n  //TODO duplicate\n  const target = getItemByXYAndType(state.items)(getAgent(state))('crop');\n  const condition = state => {\n    return unitHasAp(agent.id)(state) && getItemByXYAndType(state.items)(getAgent(state))('crop');\n  };\n  if (!condition(state)) {\n    return null;\n  }\n  const handleHarvestCrop = () => {\n    dispatch({\n      type: 'HARVEST_CROP',\n      payload: {\n        agentId: agent.id,\n        targetId: target.id,\n        condition,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleHarvestCrop}>HarvestCrop</Button>);\n}\n\nexport default function Orders() {\n  const {state} = useContext(ReducerDispatch);\n  return <div>\n    <Card>\n      <CardContent>\n        <TurnButton/>\n        {\n          getEnemyItems(state).map((enemy) => <AttackButton key={enemy.id} targetId={enemy.id}/>)\n        }\n        <MoveToGrassButton/>\n        <MoveToEventsButton/>\n        <BuildFarmButton/>\n        <PlantCropButton/>\n        <HarvestCropButton/>\n      </CardContent>\n    </Card>\n  </div>\n}\n","import React, {useContext} from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport {ReducerDispatch} from \"./App\";\nimport Button from \"@material-ui/core/Button\";\nimport {selectItemById, selectSelectedItem} from \"./reducer\";\n\nfunction UnitCard() {\n  const {state} = useContext(ReducerDispatch);\n  const selected = selectSelectedItem(state);\n  if (selected === undefined) {\n    return null;\n  }\n  const {id, playerId, x, y, hp, ap, type} = selected;\n  const maxHp = 5;\n  const relativeHp = hp / maxHp * 100;\n  const defaultEvent = {type: 'DEFAULT_EVENT', itemId: selected.id};\n  return (\n    <Card>\n      <CardContent>\n        <Typography>id:{id}</Typography>\n        <Typography>player:{playerId}</Typography>\n        <Typography>x:{x}</Typography>\n        <Typography>y:{y}</Typography>\n        <Typography>hp:{hp}</Typography>\n        <Typography>ap:{ap}</Typography>\n        <Typography>type:{type}</Typography>\n        <LinearProgress variant=\"determinate\" value={relativeHp}/>\n        <TrainEventButton event={defaultEvent}/>\n        <FinishTrainEventButton/>\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction TrainEventButton({event}) {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  if (agent === undefined || agent.training) {\n    return null;\n  }\n  const handleTrainEvent = () => {\n    dispatch({\n      type: 'TRAIN_EVENT',\n      payload: {\n        agentId: agent.id,\n        event,\n      }\n    })\n  };\n  return (<Button color='default' onClick={handleTrainEvent}>Train {event.type} Behavior</Button>);\n}\n\nfunction FinishTrainEventButton() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n  const agent = selectSelectedItem(state);\n  if (agent === undefined || !agent.training) {\n    return null;\n  }\n  const handleTrainEvent = () => {\n    dispatch({\n      type: 'FINISH_TRAIN_EVENT',\n      payload: {\n        agentId: agent.id,\n      }\n    })\n  };\n  return (\n    <Button color='default' onClick={handleTrainEvent}>Finish train event Behavior</Button>);\n}\n\nfunction EventCard({event}) {\n  const {state} = useContext(ReducerDispatch);\n  const {x, y, type} = (event.itemId ? selectItemById(event.itemId)(state) : {});\n  return (\n    <Card>\n      <CardContent>\n        <Typography>type:{event.type}</Typography>\n        <Typography>x:{x}</Typography>\n        <Typography>y:{y}</Typography>\n        <Typography>itemType:{type}</Typography>\n        <TrainEventButton event={event}/>\n      </CardContent>\n    </Card>\n  )\n}\n\nfunction EventsInfo() {\n  const {events} = useContext(ReducerDispatch).state;\n  return events.map((event, index) => <EventCard key={\"event\" + index} event={event}/>);\n}\n\nexport default function InfoPane() {\n  return <div>\n    <UnitCard/>\n    <EventsInfo/>\n  </div>\n}\n","import React, {useContext} from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {ReducerDispatch} from \"./App\";\n\nexport default function WinDialog() {\n  const {state, dispatch} = useContext(ReducerDispatch);\n\n\n  const handleRestart = () => dispatch({type: 'RESTART', payload: undefined});\n  return (\n    <div>\n      <Dialog open={!!state.winner} aria-labelledby=\"alert-dialog-title\"\n              aria-describedby=\"alert-dialog-description\">\n        <DialogTitle id=\"alert-dialog-title\">{`The winner is ${state.winner}!`}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">Play another round?</DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleRestart} color=\"primary\">Yes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, {useReducer} from 'react';\nimport './App.css';\nimport PlayingField from './PlayingField';\nimport Orders from './Orders';\nimport InfoPane from './InfoPane';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport WinDialog from \"./WinDialog\";\nimport reducer from \"./reducer\";\nimport {generateState} from \"./stateGenerator\";\n\nexport const ReducerDispatch = React.createContext(null);\n\nconst initialState = generateState();\n\nexport default function App() {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n      <Grid container justify=\"center\" direction=\"row\" spacing={24}>\n        <ReducerDispatch.Provider value={{state, dispatch}}>\n          <WinDialog/>\n          <Grid item xs>\n            <InfoPane/>\n          </Grid>\n          <Grid item xs>\n            <PlayingField size=\"10\"/>\n          </Grid>\n          <Grid item xs={4}>\n            <Orders/>\n          </Grid>\n        </ReducerDispatch.Provider>\n      </Grid>\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}